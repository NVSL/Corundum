initSidebarItems({"derive":[["PClone",""],["Root",""]],"macro":[["pool","This macro creates a new pool module and aliases for persistent types. It generates type `BuddyAlloc` which a persistent allocator type. It is recommended to alias the `BuddyAlloc` type for tidiness."],["static_inner","This macro can be used to access static data of an arbitrary allocator"],["static_inner_object","This macro can be used to declare a static struct for the inner data of an arbitrary allocator."]],"mod":[["alloc","Persistent Memory allocation APIs"],["boxed","A persistent pointer type for persistent memory allocation"],["cell","Persistent shareable mutable containers"],["clone","The `PClone` trait for types that cannot be 'implicitly copied'"],["convert",""],["default","The default allocator module"],["ll","Low-level utils"],["prc","Single-threaded reference-counting persistent pointers"],["ptr","Manually manage memory through raw pointers"],["result","A `Result` type with string error messages"],["stm","Software transactional memory APIs"],["str","Persistent unicode string slices"],["sync","Useful synchronization primitives"],["vec","A contiguous growable array type with heap-allocated contents, written Vec"]],"struct":[["AssertTxInSafe","A simple wrapper around a type to assert that it is safe to go in a transaction."]],"trait":[["LooseTxInUnsafe","The implementing type can be asserted `TxInSafe` albeit being `!TxInSafe` by `AssertTxInSafe`."],["PSafe","It marks the implementing type to be free of pointers to the volatile heap, and persistence safe."],["RootObj","Creates a default value of the type"],["TxInSafe","It is equal to UnwindSafe, but is used to ensure doubly that mutable references cannot go inside a transaction."],["TxOutSafe","It marks the implementing type to be safe crossing transaction boundaries"],["VSafe","Safe to be stored in volatile memory useful in `VCell` type to prevent storing persistent pointers in `VCell`"]]});