var searchIndex = JSON.parse('{\
"corundum":{"doc":"<em>Corundum</em> is a crate with an idiomatic persistent memory â€¦","t":[12,3,8,24,8,8,24,8,8,8,8,0,11,11,0,11,0,0,0,0,11,11,11,11,10,11,11,0,14,14,14,11,11,14,0,0,0,11,0,14,0,0,0,11,11,11,0,0,11,3,17,17,8,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,6,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,6,6,6,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,8,10,3,6,6,6,6,6,6,6,6,6,6,6,6,3,3,8,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,5,5,5,5,5,5,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,11,11,11,11,11,5,5,11,11,11,11,13,3,13,13,13,13,17,3,3,4,8,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,3,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,5,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","AssertTxInSafe","LooseTxInUnsafe","PClone","PSafe","PSend","Root","RootObj","TxInSafe","TxOutSafe","VSafe","alloc","borrow","borrow_mut","boxed","call_once","cell","clone","convert","default","deref","deref_mut","fmt","from","init","into","into_future","ll","log","may_crash","measure","poll","poll_next","pool","prc","ptr","result","size_hint","stat","static_inner","stm","str","sync","try_from","try_into","type_id","utils","vec","vzip","BuddyAlg","DEFAULT_POOL_SIZE","FLAG_HAS_ROOT","MemPool","O_128GB","O_16GB","O_16TB","O_1GB","O_1TB","O_256GB","O_2GB","O_2TB","O_32GB","O_32TB","O_4GB","O_4TB","O_512GB","O_64GB","O_64TB","O_8GB","O_8TB","O_C","O_CF","O_CFNE","O_CNE","O_F","PmemUsage","Zones","alloc","alloc","alloc_for_value","alloc_for_value","alloc_impl","alloc_zeroed","alloc_zeroed","allocated","allocated","apply_flags","apply_flags","at","atomic_new","atomic_new","atomic_new_slice","atomic_new_slice","atomic_new_uninit","atomic_new_uninit","aux_push","available","available","available","borrow","borrow","borrow_mut","borrow_mut","clear","clear","close","close","commit","commit","commit_no_clear","commit_no_clear","contains","contains","count","dealloc","dealloc","dealloc_impl","deref","deref","deref_mut","deref_mut","deref_slice_unchecked","deref_slice_unchecked","deref_slice_unchecked_mut","deref_slice_unchecked_mut","discard","discard","discard","drain_aux","drop_journal","drop_journal","drop_on_failure","drop_on_failure","drop_on_failure","end","end","format","format","free","free","free_nolog","free_nolog","free_slice","free_slice","from","from","from_off","gen","gen","get","get_idx","get_mut_unchecked","get_mut_unchecked","get_unchecked","get_unchecked","heap","index","index_mut","init","into","into","is_allocated","is_open","is_open","journals","journals","journals_head","journals_head","log","log64","log64","name","name","new","new","new","new_slice","new_slice","new_uninit","new_uninit","new_uninit_for_layout","new_uninit_for_layout","off","off","off_unchecked","off_unchecked","open","open","open_flags","open_no_root","open_no_root","perform","perform","perform","pre_alloc","pre_dealloc","prepare","prepare","prepare","print","print_info","print_info","quota","recover","recover","recover","recovery_info","rng","rng","rollback","rollback","rollback_no_clear","rollback_no_clear","size","size","size","size_of","size_of_pmem","start","start","transaction","transaction","try_from","try_from","try_into","try_into","tx_gen","tx_gen","type_id","type_id","used","used","used","valid","valid","vzip","vzip","zone","zone","Heap","Journal","PCell","PMutex","PNonNull","PRef","PRefCell","PRefMut","PString","PVec","Parc","Pbox","Prc","VCell","allocated","available","borrow","borrow_mut","close","discard","drop_journal","drop_on_failure","format","from","into","is_open","journals","journals_head","log64","name","open","open_no_root","parc","perform","prc","pre_alloc","pre_dealloc","recover","rng","size","try_from","try_into","type_id","vzip","PWeak","VWeak","PWeak","VWeak","O_128GB","O_16GB","O_16TB","O_1GB","O_1TB","O_256GB","O_2GB","O_2TB","O_32GB","O_32TB","O_4GB","O_4TB","O_512GB","O_64GB","O_64TB","O_8GB","O_8TB","O_C","O_CF","O_CFNE","O_CNE","O_F","Pbox","as_mut","as_ref","assume_init","borrow","borrow_mut","cmp","deref","deref_mut","drop","eq","finish","fmt","fmt","from","from_raw","ge","gt","hash","init","init","initialize","into","into_pin","into_raw","into_raw_non_null","le","leak","lt","ne","new","new_uninit","new_zeroed","off","partial_cmp","pclone","pin","to_pstring","to_string","try_from","try_into","type_id","vzip","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","LazyCell","PCell","PRefCell","Ref","RefMut","RootCell","RootObj","TCell","VCell","as_mut","as_mut","as_non_null","as_non_null_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force","from","from","from","from","from","from","from","from","from","from","ge","ge","ge","ge","ge","ge","get","get_mut","get_mut","gt","gt","gt","gt","gt","gt","init","init","init","into","into","into","into","into","into","into","into","into_inner","into_mut","invalidate","invalidate","le","le","le","le","le","le","leak","lt","lt","lt","lt","lt","lt","new","new","new","new","new","new","new_invalid","new_invalid","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pclone","pclone","pfrom","pfrom","pfrom","read","replace","replace","replace_with","set","strong_count","swap","swap","take","take","to_owned","to_owned","to_owned","to_pstring","to_pstring","to_pstring","to_pstring","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","PClone","pclone","pclone_from","PFrom","pfrom","BuddyAlloc","Journal","PCell","PMutex","PNonNull","PRef","PRefCell","PRefMut","PString","PVec","Parc","Pbox","Prc","Ptr","RootCell","RootObj","TCell","VCell","allocated","available","borrow","borrow_mut","close","discard","drop","drop_journal","drop_on_failure","end","format","from","gen","init","into","is_open","journals","journals_head","log64","name","open","open_impl","open_no_root","parc","perform","prc","pre_alloc","pre_dealloc","prepare","print_info","recover","rng","size","start","try_from","try_into","tx_gen","type_id","used","vzip","zone","PWeak","VWeak","PWeak","VWeak","clflush","clflush_obj","cpu","mfence","persist","persist_obj","sfence","Prc","PrcBox","VWeak","Weak","as_raw","as_ref","assume_init","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","demote","deref","downgrade","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_raw","ge","get_mut","get_mut_unchecked","gt","hash","init","init","init","initialize","into","into","into","into","into_raw","le","lt","new","new","new_uninit","new_zeroed","null","partial_cmp","pclone","pclone","promote","ptr_eq","ptr_eq","size_of","size_of","strong_count","strong_count","to_owned","to_pstring","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unsafe_demote","upgrade","vzip","vzip","vzip","vzip","weak_count","weak_count","LogNonNull","NonNull","Ptr","Slice","as_ref","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","dup","empty","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get_mut","get_unchecked","index","into","into","into","into","is_dangling","is_empty","new","new","new","new_unchecked","new_unchecked","off","off","off_ref","size_of","size_of","split_at","split_at_mut","to_owned","to_owned","to_owned","to_owned","to_pstring","to_pstring","to_pstring","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Result","Alloc","Batch","ClearLog","CommitLog","Custom","DataLog","Dealloc","Deref","DropLog","Logging","Measure","MutexLog","NewJournal","NewPage","Nop","RollbackLog","Sync","Transaction","Unknown","borrow","borrow_mut","drop","from","into","report","save_histograms","try_from","try_into","type_id","vzip","Atomic","Chaperon","DataLog","DropOnAbort","DropOnCommit","DropOnFailure","JOURNAL_COMMITTED","Journal","Log","LogEnum","Logger","NonAtomic","None","None","Notifier","RecountOnFailure","UnlockOnCommit","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","commit","default","drop","drop_on_abort","drop_on_commit","drop_on_failure","enter_into","eq","eq","eq","eq","fast_forward","filename","fmt","fmt","fmt","fmt","from","from","from","from","from","gen","hash","ignore","inner","into","into","into","into","into","is_committed","is_running","is_set","kind","load","ne","ne","new","new","next_off","next_off_ref","notify","off","prev_off","prev_off_ref","pspd","recount_on_failure","recover","recovery_info","rollback","session","set","take","take_log","to_owned","to_owned","to_owned","transaction","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unlock_on_commit","update","vspd","vzip","vzip","vzip","vzip","vzip","Scratchpad","borrow","borrow_mut","drop","from","into","try_from","try_into","type_id","vzip","Scratchpad","borrow","borrow_mut","drop","from","into","try_from","try_into","type_id","vzip","String","ToPString","ToStringSlice","as_bytes","as_mut","as_ref","as_ref","as_str","borrow","borrow_mut","capacity","clear","cmp","default","deref","deref_mut","eq","eq","eq","fmt","fmt","from","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into_bytes","is_empty","len","ne","ne","ne","new","partial_cmp","pclone","pclone_from","pfrom","pop","push","push_str","remove","replace_range","reserve","retain","shrink_to","shrink_to_fit","split_off","to_pstring","to_pstring","to_pstring","to_string","to_string","truncate","try_from","try_into","type_id","vzip","with_capacity","write_char","write_str","MutexGuard","PMutex","Parc","ParcInner","VWeak","Weak","as_raw","as_ref","assume_init","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","demote","deref","deref","deref_mut","downgrade","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_raw","ge","get_mut","get_mut_unchecked","gt","hash","init","init","init","init_lock","initialize","into","into","into","into","into","into","into_raw","le","lock","lt","new","new","new","new_uninit","new_zeroed","partial_cmp","pclone","pclone","promote","ptr_eq","ptr_eq","size_of","size_of","strong_count","strong_count","to_owned","to_pstring","to_pstring","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","type_id","type_id","type_id","type_id","type_id","type_id","unsafe_demote","upgrade","vzip","vzip","vzip","vzip","vzip","vzip","weak_count","weak_count","Ring","SpinLock","acquire","as_slice","as_slice64","borrow","borrow","borrow_mut","borrow_mut","can_crash","clear","contains","drain_atomic","drop","find","fmt","foreach","foreach_reverse","from","from","into","into","is_empty","len","nearest_pow2","new","pop","push","push_sync","rand","read","read_addr","sync_all","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","IntoIteratorHelper","IterHelper","Vec","append","as_ref","as_ref","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","cast","clear","cmp","default","deref","drop","empty","eq","eq","eq","eq","eq","extend_from_slice","fmt","fmt","from","from","from","from","from_raw_parts","from_slice","index","insert","into","into","into","into_iter","into_iter","into_iter","is_empty","len","ne","ne","ne","ne","ne","new","next","next","off","partial_cmp","pclone","pfrom","pfrom","pfrom","pfrom","pop","push","remove","reserve","retain","set_len","shrink_to","shrink_to_fit","split_off","swap_remove","to_pstring","to_str","to_string","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_capacity"],"q":["corundum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::alloccorundum::alloc::heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::alloc::heap::parc","","corundum::alloc::heap::prc","","corundum::alloc::open_flags","","","","","","","","","","","","","","","","","","","","","","corundum::boxed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::cellcorundum::clone","","","corundum::convert","","corundum::default","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::default::parc","","corundum::default::prc","","corundum::ll","","","","","","","corundum::prc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::ptr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::result","corundum::stat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::stm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::stm::pspd","","","","","","","","","","corundum::stm::vspd","","","","","","","","","","corundum::str","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","corundum::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A simple wrapper around a type to assert that it is safe â€¦","The implementing type can be asserted <code>TxInSafe</code> albeit â€¦","","It marks the implementing type to be free of pointers to â€¦","Safe to be sent to another thread","","Creates a default value of the type","It is equal to UnwindSafe, but is used to ensure doubly â€¦","It marks the implementing type to be safe crossing â€¦","Safe to be stored in volatile memory useful in <code>VCell</code> type â€¦","Persistent Memory allocation APIs","","","A persistent pointer type for persistent memory allocation","","Persistent shareable mutable containers","The <code>PClone</code> trait for types that cannot be â€˜implicitly â€¦","","The default allocator module","","","","","","","","Low-level utils","","","","","","This macro creates a new pool module and aliases for â€¦","Single-threaded reference-counting persistent pointers","Manually manage memory through raw pointers","A <code>Result</code> type with string error messages","","","This macro can be used to access static data of an â€¦","Software transactional memory APIs","Persistent unicode string slices","Useful synchronization primitives","","","","","A contiguous growable array type with heap-allocated â€¦","","Buddy Allocation Algorithm","Default pool memory size to be used while creating a new â€¦","Shows that the pool has a root object","Persistent Memory Pool","Open Flag: Creates a pool memory file of size 128GB","Open Flag: Creates a pool memory file of size 16GB","Open Flag: Creates a pool memory file of size 16TB","Open Flag: Creates a pool memory file of size 1GB","Open Flag: Creates a pool memory file of size 1TB","Open Flag: Creates a pool memory file of size 256GB","Open Flag: Creates a pool memory file of size 2GB","Open Flag: Creates a pool memory file of size 2TB","Open Flag: Creates a pool memory file of size 32GB","Open Flag: Creates a pool memory file of size 32TB","Open Flag: Creates a pool memory file of size 4GB","Open Flag: Creates a pool memory file of size 4TB","Open Flag: Creates a pool memory file of size 512GB","Open Flag: Creates a pool memory file of size 64GB","Open Flag: Creates a pool memory file of size 64TB","Open Flag: Creates a pool memory file of size 8GB","Open Flag: Creates a pool memory file of size 8TB","Open Flag: Create the pool memory file","Open Flag: Creates and formats a new file","Open Flag: Creates and formats pool memory file only if â€¦","Open Flag: Creates pool memory file only if it does not â€¦","Open Flag: Formats the pool memory file if file exists, â€¦","Determines how much of the <code>MemPool</code> is used for the trait â€¦","Memory Zones","Allocate memory as described by the given <code>size</code>.","Allocate memory as described by the given <code>size</code>.","Allocates new memory for value <code>x</code>","Allocates new memory for value <code>x</code>","Generates required changes to the metadata for allocating â€¦","Behaves like <code>alloc</code>, but also ensures that the contents â€¦","Behaves like <code>alloc</code>, but also ensures that the contents â€¦","Indicates if the given offset is allocated","Indicates if the given offset is allocated","Applies open pool flags","Applies open pool flags","Returns a mutable reference to the i-th zone object","Allocates new memory and then places <code>x</code> into it without â€¦","Allocates new memory and then places <code>x</code> into it without â€¦","Allocates new memory and then places <code>x</code> into it without â€¦","Allocates new memory and then places <code>x</code> into it without â€¦","Allocates new memory without copying data and realizing â€¦","Allocates new memory without copying data and realizing â€¦","Adds a new entry to the auxiliary list of changes","Returns the total available space in the pool","Available space in the pool","Available space in the pool","","","","","Clears the logs","Clears the logs","Commits all changes and clears the logs for all threads","Commits all changes and clears the logs for all threads","Commits all changes and clears the logs for one thread","Commits all changes and clears the logs for one thread","Commits all changes without clearing the logs","Commits all changes without clearing the logs","Checks if <code>addr</code> is in the valid address range if this â€¦","Checks if <code>addr</code> is in the valid address range if this â€¦","Returns the number of zones","Deallocate the block of memory at the given <code>ptr</code> pointer â€¦","Deallocate the block of memory at the given <code>ptr</code> pointer â€¦","Generates required changes to the metadata for reclaiming â€¦","Acquires a reference to the object","Acquires a reference to the object","Acquires a mutable reference pointer to the object","Acquires a mutable reference pointer to the object","Acquires a reference to the slice","Acquires a reference to the slice","Acquires a mutable reference to the slice","Acquires a mutable reference to the slice","Discards the changes in the auxiliary buffer","Discards the prepared operations","Discards the prepared operations","Drain the auxiliary list of changes","Drops a <code>journal</code> from memory","Drops a <code>journal</code> from memory","Adds a new low-level <code>DropOnFailure</code> log entry","Adds a low-level <code>DropOnFailure</code> log to perform inside the â€¦","Adds a low-level <code>DropOnFailure</code> log to perform inside the â€¦","End of virtual address range","End of virtual address range","Formats the memory pool file","Formats the memory pool file","Creates a <code>DropOnCommit</code> log for the value <code>x</code>","Creates a <code>DropOnCommit</code> log for the value <code>x</code>","Frees the allocation for value <code>x</code> immediately","Frees the allocation for value <code>x</code> immediately","Creates a <code>DropOnCommit</code> log for the value <code>x</code>","Creates a <code>DropOnCommit</code> log for the value <code>x</code>","","","Returns a mutable reference to the zone object associated â€¦","","","Returns a mutable reference to the zone object associated â€¦","","Acquires a mutable reference to the object","Acquires a mutable reference to the object","Acquires a reference pointer to the object","Acquires a reference pointer to the object","","","","Pool Initialization with a given device size","","","Determines if the given address range is allocated","Returns true if the pool is open","Returns true if the pool is open","Runs a closure with a mutable reference to a â€¦","Runs a closure with a mutable reference to a â€¦","Returns a reference to the offset of the first journal","Returns a reference to the offset of the first journal","Adds a new low-level 64-bit log entry","Adds a low-level log to update as 64-bit <code>obj</code> to <code>val</code> when  â€¦","Adds a low-level log to update as 64-bit <code>obj</code> to <code>val</code> when  â€¦","Returns the name of the pool type","Returns the name of the pool type","Creates a new <code>Zones</code> object","Allocates new memory and then places <code>x</code> into it with â€¦","Allocates new memory and then places <code>x</code> into it with â€¦","Allocates a new slice and then places <code>x</code> into it with â€¦","Allocates a new slice and then places <code>x</code> into it with â€¦","Allocates new memory without copying data","Allocates new memory without copying data","Allocates new memory without copying data","Allocates new memory without copying data","Translates raw pointers to memory offsets","Translates raw pointers to memory offsets","Translates raw pointers to memory offsets","Translates raw pointers to memory offsets","Opens a pool and retrieves the root object","Opens a pool and retrieves the root object","Open pool flags","Opens a new pool without any root object. This function â€¦","Opens a new pool without any root object. This function â€¦","Materializes the changes in the auxiliary list and clears â€¦","Performs the prepared operations","Performs the prepared operations","Prepares allocation without performing it","Prepares deallocation without performing it","Begins a failure-atomic section","In case of not using <code>pre_alloc</code> or <code>pre_dealloc</code>, starts a â€¦","In case of not using <code>pre_alloc</code> or <code>pre_dealloc</code>, starts a â€¦","Prints the free lists","Prints memory information","Prints memory information","Returns the size of zones","Starts the recovery procedure. If the crash happened â€¦","Recovers from a crash","Recovers from a crash","","Valid Virtual Address Range","Valid Virtual Address Range","Discards all changes and clears the logs","Discards all changes and clears the logs","Discards all changes without clearing the logs","Discards all changes without clearing the logs","Returns the pool size","Total size of the memory pool","Total size of the memory pool","Size of the object on Persistent Memory Assuming that â€¦","Size of the object on Persistent Memory including <code>Self</code> â€¦","Start of virtual address range","Start of virtual address range","Executes commands atomically with respect to system â€¦","Executes commands atomically with respect to system â€¦","","","","","","","","","Returns the total number of bytes used from the pool","Total occupied space","Total occupied space","Checks if the reference <code>p</code> belongs to this pool","Checks if the reference <code>p</code> belongs to this pool","","","Returns the zone index corresponding to a given address","Returns the zone index corresponding to a given address","A pass-through allocator for volatile memory","Compact form of <code>Journal</code> <code><</code><code>Heap</code><code>></code>.","Compact form of <code>PCell</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>PMutex</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>LogNonNull</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>Ref</code> <code><\'b, T, </code><code>Heap</code><code>></code>.","Compact form of <code>PRefCell</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>RefMut</code> <code><\'b, T, </code><code>Heap</code><code>></code>.","Compact form of <code>String</code> <code><</code><code>Heap</code><code>></code>.","Compact form of <code>Vec</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>Parc</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>Pbox</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>Prc</code> <code><T,</code><code>Heap</code><code>></code>.","Compact form of <code>[VCell](../../cell/struct.VCell.html) </code><T,<code>[</code>â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compact form of <code>sync::Weak</code> <code><</code><code>Heap</code><code>></code>.","Compact form of <code>sync::VWeak</code> <code><</code><code>Heap</code><code>></code>.","Compact form of <code>prc::Weak</code> <code><</code><code>Heap</code><code>></code>.","Compact form of <code>prc::VWeak</code> <code><</code><code>Heap</code><code>></code>.","Open Flag: Creates a pool memory file of size 128GB","Open Flag: Creates a pool memory file of size 16GB","Open Flag: Creates a pool memory file of size 16TB","Open Flag: Creates a pool memory file of size 1GB","Open Flag: Creates a pool memory file of size 1TB","Open Flag: Creates a pool memory file of size 256GB","Open Flag: Creates a pool memory file of size 2GB","Open Flag: Creates a pool memory file of size 2TB","Open Flag: Creates a pool memory file of size 32GB","Open Flag: Creates a pool memory file of size 32TB","Open Flag: Creates a pool memory file of size 4GB","Open Flag: Creates a pool memory file of size 4TB","Open Flag: Creates a pool memory file of size 512GB","Open Flag: Creates a pool memory file of size 64GB","Open Flag: Creates a pool memory file of size 64TB","Open Flag: Creates a pool memory file of size 8GB","Open Flag: Creates a pool memory file of size 8TB","Open Flag: Create the pool memory file","Open Flag: Creates and formats a new file","Open Flag: Creates and formats pool memory file only if â€¦","Open Flag: Creates pool memory file only if it does not â€¦","Open Flag: Formats the pool memory file if file exists, â€¦","A pointer type for persistent heap allocation.","","","Converts to <code>Pbox<T, A></code>.","","","","","","","","","","","","Constructs a box from a raw pointer.","","","","","","Initializes boxed data with <code>value</code> in-place if it is <code>None</code>","","Converts a <code>Pbox<T, A></code> into a <code>Pin<Pbox<T, A>></code>","Consumes the <code>Pbox</code>, returning a wrapped raw pointer.","Consumes the <code>Pbox</code>, returning the wrapped pointer as â€¦","","Consumes and leaks the <code>Pbox</code>, returning a mutable â€¦","","","Allocates memory on the persistent heap and then places <code>x</code> â€¦","Constructs a new Pbox with uninitialized contents.","Constructs a new <code>Pbox</code> with uninitialized contents, with â€¦","","","Returns a new box with a <code>pclone()</code> of this boxâ€™s â€¦","Constructs a new <code>Pin<Pbox<T, A>></code>. If <code>T</code> does not implement â€¦","","","","","","","","","","","","","","","","","","","","A memory cell which is initialized on the first access","A persistent mutable memory location with recoverability","A persistent memory location with safe interior â€¦","","","Root object container","Creates a default value of the type","A persistent memory location containing a volatile data â€¦","A persistent memory location containing a volatile data","Returns a mutable reference to the underlying data â€¦","Returns a mutable reference to the underlying data â€¦","Returns a <code>NonNull</code> pointer to the data","Returns a <code>LogNonNull</code> pointer to the data","","","Immutably borrows from an owned value.","","","","","","","","","Mutably borrows from an owned value.","","","","","","","","","Copies a <code>Ref</code>.","","","","","","","","","","","","Creates a new lazy value using <code>Default</code> as the â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Crates a new <code>PRefCell</code>","","","","","","","","","","","","","","","Returns a copy of the contained value.","Returns a mutable reference to the underlying data.","Takes a log and returns a mutable reference to the â€¦","","","","","","","","","","","","","","","","","","Unwraps the value.","Converts <code>RefMut</code> into a mutable reference within the same â€¦","Invalidates the underlying value","Invalidates the underlying value","","","","","","","Convert into a reference to the underlying data.","","","","","","","Creates a new <code>PCell</code> containing the given value.","Creates a new instance of <code>PRefCell</code> with the given value","","Create a new valid cell","Create a new valid cell","Creates a new lazy value with the given initializing â€¦","Create a new invalid cell to be used in const functions","Create a new invalid cell to be used in const functions","","","","","","","","","","Crates a new <code>PRefCell</code> and drops the <code>Ref</code>","Crates a new <code>PRefCell</code> and drops the <code>Ref</code>","Crates a new <code>PRefCell</code>","Returns a clone of the underlying data","Replaces the contained value, and returns it.","Replaces the wrapped value with a new one, returning the â€¦","Replaces the wrapped value with a new one computed from <code>f</code>â€¦","Sets the contained value.","","Swaps the values of two Cells.","Swaps the wrapped value of <code>self</code> with the wrapped value of â€¦","Takes the value of the cell, leaving <code>Default::default()</code> â€¦","Takes the value of the cell, leaving <code>Default::default()</code> â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the contained value using a function and returns â€¦","","","","","","","","","A common trait for the ability to explicitly duplicate an â€¦","","Performs copy-assignment from <code>source</code>.","An equivalent to [<code>From</code>] for persistent memory which â€¦","","A memory allocator with buddy allocation mechanism","Compact form of <code>Journal</code> <code><</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>PCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>PMutex</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>LogNonNull</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>Ref</code> <code><\'b, T, </code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>PRefCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>RefMut</code> <code><\'b, T, </code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>String</code> <code><</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>Vec</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>Parc</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>Pbox</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>Prc</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","A wrapper around a raw persistent pointer that indicates â€¦","Root object container","Creates a default value of the type","Compact form of <code>TCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>VCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.","","","","","","","","","","","Formats the image file","","","","","","","","","","","Opens a memory pool file and returns an instance of â€¦","","","","","","","","","","","","","","","","","","","","Compact form of <code>sync::Weak</code> <code><</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>sync::VWeak</code> <code><</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>prc::Weak</code> <code><</code><code>BuddyAlloc</code><code>></code>.","Compact form of <code>prc::VWeak</code> <code><</code><code>BuddyAlloc</code><code>></code>.","Flushes cache line back to memory","Flushes cache lines of a whole object back to memory","","Memory fence","Synchronize caches and memories and acts like a write â€¦","Synchronize caches and memories and acts like a write â€¦","Store fence","A single-thread reference-counting persistent pointer. â€˜â€¦","","<code>VWeak</code> is a version of <code>Prc</code> that holds a non-owning â€¦","<code>Weak</code> is a version of <code>Prc</code> that holds a non-owning â€¦","","","Converts to <code>Rc<T></code>.","","","","","","","","","","","","","Creates a new <code>Weak</code> volatile to this allocation.","","Creates a new <code>Weak</code> persistent pointer to this allocation.","Drops the <code>Prc</code> safely","","","","","","","","","Owns contents of <code>p</code> without cloning, leaving <code>p</code> untouched","","","","","","Returns a mutable reference into the given <code>Prc</code>, if there â€¦","Returns a mutable reference into the given <code>Prc</code>, without â€¦","","","","","","Initializes boxed data with <code>value</code> in-place if it is <code>None</code>","","","","","","","","Constructs a new <code>Prc<T></code>.","Creates a new dangling weak pointer","Constructs a new <code>Prc</code> with uninitialized contents.","Constructs a new <code>Prc</code> with uninitialized contents, with â€¦","","","Creates a new strong reference to the object","","","Returns <code>true</code> if the two <code>Prc</code>s point to the same allocation â€¦","","","","Gets the number of <code>Weak</code> pointers to this allocation.","","","","","","","","","","","","","","","","","Demote without dynamically checking transaction boundaries","","","","","","Gets the number of <code>Weak</code> pointers to this allocation.","","An unsafe pointer with dereferencing and logging â€¦","An unsafe pointer with dereferencing capability","A wrapper around a raw persistent pointer that indicates â€¦","A persistent fat pointer with offset and capacity","","Converts the fat pointer into a slice of type <code>&[T]</code>","","","","","","","","","Returns the capacity of the fat pointer","","","","","","","","","","","","","","","Creates a new copy of data and returns a <code>Slice</code> pointer","Sets the capacity to zero","","","","","","","","","","","","","","","Returns a reference to the object at index <code>i</code>","Returns a mutable reference to the object at index <code>i</code>","Returns a mutable reference to the object at index <code>i</code> â€¦","","","","","","Checks if this pointer is dangling","Returns true if the capacity is zero","Creates a <code>Some(NonNull)</code> if <code>ptr</code> is not null; otherwise <code>None</code>â€¦","Creates a <code>Some(LogNonNull)</code> if <code>ptr</code> is not null; otherwise â€¦","Creates a new fat pointer given a slice","Creates a new <code>NonNull</code>.","Creates a new <code>LogNonNull</code>.","Returns the offset","Returns the file offset","Returns a reference to the file offset","","","Divides one slice into two at an index.","Divides one mutable slice into two at an index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Atomically update the log flag","A third-party observer for multi-pool transactions ","<code>(src, log, len)</code>: An undo log of slice <code>src..src+len</code> kept inâ€¦","<code>(u64, usize)</code>: Similar to <code>DropOnFailure</code> except that it â€¦","<code>(src, len)</code>: A drop log indicating that slice <code>src..src+len</code> â€¦","<code>(src, len)</code>: A drop log indicating that slice <code>src..src+len</code> â€¦","Determines that the changes are committed","A Journal object to be used for writing logs onto","The <code>Log</code> type for pool <code>A</code>","Log Types","A generic trait for taking a log of any type","Non-atomically update the flag","","There is no log flag","A data-log notification type","<code>(src, inc/dec)</code>: A log indicating that the object is a â€¦","Unlocks a <code>PMutex</code> on transaction commit.","","","","","","","","","","","Clears all logs and drops itself from the memory pool","Clears this log and notifies the owner","","","","","","","Commits all logs in the journal","","","Creates a new <code>DropOnAbort</code> log and writes it on <code>journal</code>","Creates a new <code>DropOnCommit</code> log and writes it on <code>journal</code>","Creates a new <code>DropOnFailure</code> log and writes it on <code>journal</code>","Atomically enters into the list journals of the owner pool","","","","","Determines whether to fast-forward or rollback the â€¦","Returns the chaperon filename","","","","","","","","","","Returns the generation number of this journal","","Ignores all logs","Returns the inner value","","","","","","Returns true if the journal is committed","Returns true if there is a running transaction on the â€¦","Checks a flag","Returns an string specifying the type of this log","Loads a chaperon file","","","Create new <code>Journal</code> with default values","Create a new log entry","Returns the offset of the next journal, if any. â€¦","","Notify the owner that the log is taken/cleared according â€¦","Returns the offset of the log flag in the pool.","Returns the offset of the previous journal, if any. â€¦","","Persistent Scratchpad Memory","Creates a new <code>DropOnCommit</code> log and writes it on <code>journal</code>","Recovers from a crash or power failure","Returns a string containing the logging information","Reverts all changes","Starts a chaperoned session","Sets the <code>off</code> and <code>len</code> of the log","Takes a log of <code>x</code> into <code>journal</code> and notifies the owner that â€¦","Takes a log of <code>self</code> and update the log flag if specified â€¦","","","","Atomically executes commands","","","","","","","","","","","","","","","","Creates a new <code>UnlockOnCommit</code> for locking data in a thread","Update the ownerâ€™s flag","Volatile Scratchpad Memory","","","","","","","","","","","","","","","","","","","","","","","","","","A UTF-8 encoded, growable string.","","","Returns a byte slice of this <code>String</code>â€™s contents.","","","","Extracts a string slice containing the entire <code>String</code>.","","","Returns this <code>String</code>â€™s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","Creates an empty <code>String</code>.","","","","","","","","","Creates a <code>String</code> from <code>&str</code>","Decode a UTF-16 encoded vector <code>v</code> into a <code>String</code>, returning â€¦","Decode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, replacing â€¦","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a persistent string, â€¦","Converts a vector of bytes to a <code>String</code> without checking â€¦","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte â€¦","","Converts a <code>String</code> into a byte vector.","Returns <code>true</code> if this <code>String</code> has a length of zero, and â€¦","Returns the length of this <code>String</code>, in bytes, not [<code>char</code>]s â€¦","","","","Creates a new empty <code>String</code>.","","","","","Removes the last character from the string buffer and â€¦","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and â€¦","Removes the specified range in the string, and replaces â€¦","Ensures that this <code>String</code>â€™s capacity is at least â€¦","Retains only the characters specified by the predicate.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of this <code>String</code> to match its length.","Splits the string into two at the given index.","Converts the given value to a <code>String</code>.","Converts the given value to a <code>String</code>.","","","","Shortens this <code>String</code> to the specified length.","","","","","Creates a new empty <code>String</code> with a particular capacity.","","","","A transaction-wide recursive mutual exclusion primitive â€¦","A thread-safe reference-counting persistent pointer. â€˜â€¦","The [<code>Parc</code>] inner data type","<code>VWeak</code> is a version of [<code>Parc</code>] that holds a non-owning â€¦","<code>Weak</code> is a version of [<code>Parc</code>] that holds a non-owning â€¦","","","Converts to <code>Parc<T></code>.","","","","","","","","","","","","","","","","","","Creates a new sharable <code>VWeak</code> pointer to this allocation.","","","","Creates a new [<code>Weak</code>] pointer to this allocation.","","Drops the <code>Parc</code> safely","","","","","","","","","","","","","","","","","","","Returns a mutable reference into the given <code>Parc</code>, if there â€¦","Returns a mutable reference into the given <code>Parc</code>, without â€¦","","","","","","","Initializes boxed data with <code>value</code> in-place if it is <code>None</code>","","","","","","","","","Acquires a mutex, blocking the current thread until it is â€¦","","Creates a new <code>Mutex</code>","Constructs a new <code>Parc<T></code>.","Creates a new dangling weak pointer","Constructs a new <code>Parc</code> with uninitialized contents.","Constructs a new <code>Parc</code> with uninitialized contents, with â€¦","","","","Attempts to promote the <code>VWeak</code> pointer to an [<code>Parc</code>], â€¦","Returns <code>true</code> if the two <code>Parc</code>s point to the same allocationâ€¦","Returns <code>true</code> if the two <code>Weak</code>s point to the same â€¦","","","Gets the number of <code>Strong</code> pointers to this allocation.","Gets the number of strong (<code>Parc</code>) pointers pointing to â€¦","","","","","","","","","","","","","","","","","","Attempts to acquire this lock.","","","","","","","Demote without dynamically checking transaction boundaries","Attempts to upgrade the <code>Weak</code> pointer to an [<code>Parc</code>], â€¦","","","","","","","Gets the number of <code>Weak</code> pointers to this allocation.","Gets an approximation of the number of <code>Weak</code> pointers â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","structure helper for consuming iterator.","structure helper for non-consuming iterator.","A contiguous growable persistent array type, written â€¦","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> â€¦","","","Consumes the vector and converts it into a slice","","","","","","","Returns the available capacity of the vector in the â€¦","","Clears the vector, removing all values.","","","","","Creates an empty vector with zero capacity","","","","","","Copy all the elements of <code>other</code> into <code>Self</code>","","","Converts the given <code>String</code> to a vector <code>Vec</code> that holds â€¦","","","","Creates a <code>PVec<T></code> directly from the raw components of â€¦","Creates an empty vector and places <code>x</code> into it","","Inserts an element at position <code>index</code> within the vector, â€¦","","","","","","","Returns <code>true</code> if the vector contains no elements.","Returns the length of the vector","","","","","","Creates an empty vector with zero capacity for the pool â€¦","","","Returns the offset of the vector in the persistent pool","","","","","","","Removes the last element from a vector and returns it, or â€¦","Heap::transaction(|j| { Heap::transaction(|j| { Appends â€¦","Removes and returns the element at position <code>index</code> within â€¦","Copy all the elements of <code>other</code> into <code>Self</code>","Retains only the elements specified by the predicate.","Forces the length of the vector to <code>new_len</code>.","","Shrinks the capacity of the vector as much as possible.","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","","Shortens the vector, keeping the first <code>len</code> elements and â€¦","","","","","","","","","","","","","Creates an empty <code>Vec</code> with the specified capacity"],"i":[1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,1,1,2,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,4,3,3,3,3,3,3,5,3,3,3,3,3,3,4,4,3,3,4,5,4,5,3,3,3,3,3,3,3,3,3,3,5,3,3,4,3,3,3,3,3,3,3,3,4,3,3,4,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,4,5,5,3,3,5,0,3,3,3,3,0,5,5,4,4,5,4,3,3,3,3,3,3,4,3,3,3,3,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,4,3,3,3,3,4,3,3,4,3,3,5,4,3,3,4,3,3,3,3,3,3,4,3,3,6,6,3,3,3,3,4,5,4,5,3,3,4,5,4,3,3,3,3,4,5,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,9,10,10,10,9,10,10,11,12,13,14,15,16,9,10,10,11,12,13,14,15,16,9,10,11,13,9,10,13,9,10,13,14,15,9,14,16,11,12,13,14,15,16,12,14,15,11,12,9,10,13,14,14,15,15,9,10,10,11,12,12,13,13,15,16,9,10,10,10,11,12,13,14,15,16,9,10,14,14,15,15,9,9,10,9,10,14,14,15,15,2,10,15,9,10,11,12,13,14,15,16,9,12,14,15,9,10,14,14,15,15,11,9,10,14,14,15,15,9,10,13,14,15,16,14,15,9,10,13,14,14,15,15,9,10,10,10,10,10,9,10,10,9,13,9,10,9,10,9,10,13,10,11,12,13,10,11,12,13,9,10,11,12,13,14,15,16,9,10,11,12,13,14,15,16,9,10,11,12,13,14,15,16,9,9,10,11,12,13,14,15,16,0,17,17,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,2,19,19,19,19,19,19,19,19,19,0,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,21,22,21,21,20,23,22,21,20,23,23,23,21,21,21,21,21,20,23,21,21,21,21,20,22,21,21,20,23,20,21,21,21,21,21,21,21,20,21,22,21,20,23,20,21,21,21,20,21,21,23,21,21,20,23,21,20,21,21,21,20,23,21,21,22,21,20,23,22,21,20,23,22,21,20,23,21,20,22,21,20,23,21,20,0,0,0,0,24,25,24,26,25,27,24,26,25,27,25,24,26,25,27,24,26,25,27,25,24,26,27,26,27,25,25,25,27,24,24,26,26,27,27,24,26,25,25,25,27,25,25,25,25,24,26,25,27,27,25,24,26,25,24,26,25,27,27,25,27,25,25,24,26,25,27,24,26,27,24,26,27,24,26,25,27,24,26,25,27,24,26,25,27,24,26,25,27,0,28,28,28,28,28,28,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,28,28,28,28,29,0,30,30,30,30,0,0,0,0,0,29,30,29,0,30,30,31,32,33,30,29,31,32,33,30,29,32,33,33,30,29,33,30,29,32,33,31,33,33,33,32,33,33,30,29,32,31,31,32,33,30,31,32,33,30,29,32,30,32,33,31,32,33,30,29,32,32,32,33,31,30,29,32,33,32,32,33,29,32,32,0,33,32,32,32,31,33,33,34,33,30,29,0,31,32,33,30,29,31,32,33,30,29,31,32,33,30,29,33,29,0,31,32,33,30,29,0,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,39,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,40,41,41,42,43,44,41,41,40,45,42,43,44,41,40,45,45,45,41,40,41,43,41,43,41,43,41,40,45,41,42,43,43,41,41,41,40,42,43,44,41,40,45,40,41,41,41,41,41,42,41,41,0,41,42,43,44,41,40,45,40,41,42,41,42,41,40,41,41,41,41,40,45,41,40,41,41,41,40,45,43,41,43,41,42,43,44,41,40,45,42,43,44,41,40,45,42,42,43,44,41,40,45,41,40,42,43,44,41,40,45,41,40,0,0,46,0,0,47,46,47,46,0,47,47,47,46,47,47,47,47,47,46,47,46,47,47,0,47,47,47,47,0,0,0,47,47,46,47,46,47,46,47,46,0,0,0,48,48,48,48,48,49,50,48,49,50,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,50,48,48,48,48,48,49,50,48,49,50,48,48,48,48,48,48,48,48,49,50,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,50,48,49,50,48,49,50,48,49,50,48],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[]],null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[["journal",3]]],[[]],[[]],null,null,null,null,[[["context",3],["pin",3]],["poll",4]],[[["context",3],["pin",3]],[["poll",4],["option",4]]],null,null,null,null,[[]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15],["bool",15]],["u64",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["u64",15]],["bool",15]],[[["usize",15],["u64",15]],["bool",15]],[[["u32",15],["str",15]],["result",6]],[[["u32",15],["str",15]],["result",6]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["bool",15],["u64",15]]],[[["u64",15]],["result",6]],[[["u64",15]],["result",6]],[[["u64",15]],["result",6]],[[["u64",15]],["result",6]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["journal",3]]],[[["journal",3]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[],["u32",15]],[[],["u32",15]],[[]],[[["usize",15]],["usize",15]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15],["u64",15]]],[[]],[[]],[[["usize",15],["u64",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["fn",8]]],[[["fn",8]]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[],["str",15]],[[],["str",15]],[[["usize",15]]],[[["journal",3],["psafe",8]]],[[["journal",3],["psafe",8]]],[[["journal",3]]],[[["journal",3]]],[[["journal",3]]],[[["journal",3]]],[[["usize",15],["journal",3]]],[[["usize",15],["journal",3]]],[[],[["result",6],["u64",15]]],[[],[["result",6],["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u32",15],["str",15]],[["result",6],["rootcell",3]]],[[["u32",15],["str",15]],[["result",6],["rootcell",3]]],null,[[["u32",15],["str",15]],["result",6]],[[["u32",15],["str",15]],["result",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[["u32",15]],["string",3]],[[],[["range",3],["u64",15]]],[[],[["range",3],["u64",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[],["u64",15]],[[["fnonce",8]],["result",6]],[[["fnonce",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["u32",15]],[[],["u32",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["u64",15]],["usize",15]],[[["u64",15]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["u64",15]],["bool",15]],[[],["usize",15]],[[]],[[]],[[],["result",6]],[[["usize",15]]],[[["journal",6]]],[[["usize",15],["u64",15]]],[[["str",15]],["result",6]],[[]],[[]],[[],["bool",15]],[[["fn",8]]],[[],["u64",15]],[[["usize",15],["u64",15]]],[[],["str",15]],[[["u32",15],["str",15]],[["result",6],["rootcell",3]]],[[["u32",15],["str",15]],["result",6]],null,[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[],[["range",3],["u64",15]]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["pbox",3]],[[]],[[]],[[["pbox",3]],["ordering",4]],[[]],[[]],[[]],[[["pbox",3]],["bool",15]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["pbox",3]],["bool",15]],[[["pbox",3]],["bool",15]],[[]],[[["journal",3]],["pbox",3]],[[["journal",3]],["pbox",3]],[[["option",4]],["result",6]],[[]],[[["pbox",3]],[["pbox",3],["pin",3]]],[[["pbox",3]]],[[["pbox",3]],["nonnull",3]],[[["pbox",3]],["bool",15]],[[["pbox",3]]],[[["pbox",3]],["bool",15]],[[["pbox",3]],["bool",15]],[[["journal",3]],["pbox",3]],[[["journal",3]],[["pbox",3],["maybeuninit",19]]],[[["journal",3]],[["pbox",3],["maybeuninit",19]]],[[],["u64",15]],[[["pbox",3]],[["ordering",4],["option",4]]],[[["journal",3]],["pbox",3]],[[["journal",3]],[["pbox",3],["pin",3]]],[[["journal",3]],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["i128",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["u128",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["nonnull",3]],[[["journal",3]],["lognonnull",3]],[[]],[[]],[[],["ref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["journal",3]],["refmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pcell",3]],[[],["prefcell",3]],[[["ref",3]],["ref",3]],[[]],[[]],[[]],[[]],[[["pcell",3]],["ordering",4]],[[["prefcell",3]],["ordering",4]],[[],["ordering",4]],[[["vcell",3]],["ordering",4]],[[["tcell",3]],["ordering",4]],[[]],[[]],[[],["lazycell",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pcell",3]],["bool",15]],[[["prefcell",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["vcell",3]],["bool",15]],[[],["bool",15]],[[["tcell",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["lazycell",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pcell",3]],["bool",15]],[[["prefcell",3]],["bool",15]],[[["vcell",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["tcell",3]],["bool",15]],[[]],[[["journal",3]]],[[["journal",3]]],[[["pcell",3]],["bool",15]],[[["prefcell",3]],["bool",15]],[[],["bool",15]],[[["vcell",3]],["bool",15]],[[["tcell",3]],["bool",15]],[[],["bool",15]],[[["journal",3]]],[[["journal",3]]],[[["journal",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["refmut",3]]],[[]],[[]],[[["pcell",3]],["bool",15]],[[["prefcell",3]],["bool",15]],[[],["bool",15]],[[["vcell",3]],["bool",15]],[[["tcell",3]],["bool",15]],[[],["bool",15]],[[["ref",3]]],[[["pcell",3]],["bool",15]],[[["prefcell",3]],["bool",15]],[[["vcell",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["tcell",3]],["bool",15]],[[],["pcell",3]],[[]],[[["arc",3]]],[[]],[[["journal",3]]],[[],["lazycell",3]],[[]],[[]],[[["pcell",3]],[["ordering",4],["option",4]]],[[["prefcell",3]],[["option",4],["ordering",4]]],[[],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["vcell",3]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["tcell",3]],[["ordering",4],["option",4]]],[[["journal",3]],["pcell",3]],[[["journal",3]],["prefcell",3]],[[["journal",3],["ref",3]]],[[["refmut",3],["journal",3]]],[[["journal",3]]],[[]],[[["journal",3]]],[[["journal",3]]],[[["fnonce",8],["journal",3]]],[[["journal",3]]],[[],["usize",15]],[[["journal",3]]],[[["journal",3]]],[[["journal",3]]],[[["journal",3]]],[[]],[[]],[[]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["journal",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["journal",3]]],[[["journal",3]]],null,[[["journal",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["u64",15]],["bool",15]],[[],["usize",15]],[[]],[[]],[[],["result",6]],[[["usize",15]]],[[]],[[["journal",6]]],[[["usize",15],["u64",15]]],[[],["u64",15]],[[["str",15]],["result",6]],[[]],[[],["u32",15]],[[["journal",3]]],[[]],[[],["bool",15]],[[["fn",8]]],[[],["u64",15]],[[["usize",15],["u64",15]]],[[],["str",15]],[[["u32",15],["str",15]],[["result",6],["rootcell",3]]],[[["str",15]],["result",6]],[[["u32",15],["str",15]],["result",6]],null,[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[]],[[]],[[],[["range",3],["u64",15]]],[[],["usize",15]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["u32",15]],[[],["typeid",3]],[[],["usize",15]],[[]],[[["u64",15]],["usize",15]],null,null,null,null,[[["usize",15],["bool",15]]],[[["bool",15]]],[[],["usize",15]],[[]],[[["usize",15],["bool",15]]],[[["bool",15]]],[[]],null,null,null,null,[[]],[[]],[[],["prc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prc",3]],["ordering",4]],[[],["vweak",3]],[[]],[[["journal",3]],["weak",3]],[[]],[[]],[[]],[[["prc",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["prc",3]]],[[]],[[]],[[]],[[]],[[["prc",3]],["bool",15]],[[],[["maybeuninit",19],["option",4]]],[[],["maybeuninit",19]],[[["prc",3]],["bool",15]],[[]],[[["journal",3]],["prc",3]],[[["journal",3]],["prc",3]],[[["journal",3]],["weak",3]],[[["option",4]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["prc",3]],["bool",15]],[[["prc",3]],["bool",15]],[[["journal",3]],["prc",3]],[[],["weak",3]],[[["journal",3]],[["prc",3],["maybeuninit",19]]],[[["journal",3]],[["maybeuninit",19],["prc",3]]],[[],["vweak",3]],[[["prc",3]],[["ordering",4],["option",4]]],[[["journal",3]],["prc",3]],[[["journal",3]],["weak",3]],[[["journal",3]],[["option",4],["prc",3]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["journal",3]],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["vweak",3]],[[["journal",3]],[["option",4],["prc",3]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],[["usize",15],["option",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["slice",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[["journal",3]],["option",4]],[[]],[[]],[[["journal",3]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["str",15]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["logenum",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["journal",3],["u64",15]],[["ptr",3],["log",3]]],[[["usize",15],["journal",3],["u64",15]],[["ptr",3],["log",3]]],[[["usize",15],["journal",3],["u64",15]],[["ptr",3],["log",3]]],[[["usize",15],["u64",15]]],[[],["bool",15]],[[["logenum",4]],["bool",15]],[[["logenum",4]],["bool",15]],[[["notifier",4]],["bool",15]],[[],["bool",15]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[],["logenum",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["u64",15]],["bool",15]],[[],["string",3]],[[["str",15]],["result",6]],[[["logenum",4]],["bool",15]],[[["notifier",4]],["bool",15]],[[["u32",15]]],[[["notifier",4],["logenum",4]]],[[],["u64",15]],[[],["u64",15]],[[["u8",15]]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],null,[[["bool",15],["journal",3],["u64",15]],[["ptr",3],["log",3]]],[[]],[[["u32",15]],["string",3]],[[]],[[["fnonce",8],["str",15]],["result",6]],[[["usize",15],["u64",15]]],[[["journal",3],["notifier",4]],[["ptr",3],["log",3]]],[[["journal",3],["notifier",4]],[["ptr",3],["log",3]]],[[]],[[]],[[]],[[["fnonce",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["journal",3],["u64",15]]],[[["u8",15]]],null,[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[],["str",15]],[[]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[],["usize",15]],[[]],[[["string",3]],["ordering",4]],[[],["string",3]],[[],["str",15]],[[],["str",15]],[[["str",15]],["bool",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["journal",3],["str",15]],["string",3]],[[["journal",3]],[["str",15],["string",3],["result",4]]],[[["journal",3]],["string",3]],[[["stdvec",3],["journal",3],["u8",15]],[["result",4],["fromutf8error",3],["string",3]]],[[["journal",3]],["string",3]],[[["stdvec",3],["journal",3],["u8",15]],["string",3]],[[]],[[["usize",15],["rangeinclusive",3]],["str",15]],[[["rangefull",3]],["str",15]],[[["usize",15],["range",3]],["str",15]],[[["usize",15],["rangeto",3]],["str",15]],[[["usize",15],["rangefrom",3]],["str",15]],[[["usize",15],["rangetoinclusive",3]],["str",15]],[[["usize",15],["rangetoinclusive",3]],["str",15]],[[["usize",15],["rangeinclusive",3]],["str",15]],[[["rangefull",3]],["str",15]],[[["usize",15],["rangefrom",3]],["str",15]],[[["usize",15],["rangeto",3]],["str",15]],[[["usize",15],["range",3]],["str",15]],[[["usize",15],["char",15],["journal",3]]],[[["usize",15],["journal",3],["str",15]]],[[]],[[],[["vec",3],["u8",15]]],[[],["bool",15]],[[],["usize",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[],["string",3]],[[["string",3]],[["ordering",4],["option",4]]],[[["journal",3]]],[[["journal",3]]],[[["journal",3],["str",15]],["string",3]],[[],[["option",4],["char",15]]],[[["char",15],["journal",3]]],[[["journal",3],["str",15]]],[[["usize",15]],["char",15]],[[["journal",3],["str",15]]],[[["usize",15],["journal",3]]],[[]],[[["usize",15],["journal",3]]],[[["journal",3]]],[[["usize",15],["journal",3]],["string",3]],[[["journal",3]],[["stdvec",3],["string",3]]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[],["string",3]],[[],["stdstring",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15],["journal",3]],["string",3]],[[["char",15]],["result",6]],[[["str",15]],["result",6]],null,null,null,null,null,null,[[]],[[]],[[],["parc",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parc",3]],["ordering",4]],[[]],[[],["vweak",3]],[[]],[[]],[[]],[[["journal",3]],["weak",3]],[[]],[[]],[[]],[[]],[[["parc",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parc",3]],["bool",15]],[[],[["maybeuninit",19],["option",4]]],[[],["maybeuninit",19]],[[["parc",3]],["bool",15]],[[]],[[["journal",3]]],[[["journal",3]],["parc",3]],[[["journal",3]],["parc",3]],[[]],[[["option",4]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parc",3]],["bool",15]],[[["journal",3]],["mutexguard",3]],[[["parc",3]],["bool",15]],[[],["pmutex",3]],[[["journal",3]],["parc",3]],[[],["weak",3]],[[["journal",3]],[["parc",3],["maybeuninit",19]]],[[["journal",3]],[["maybeuninit",19],["parc",3]]],[[["parc",3]],[["ordering",4],["option",4]]],[[["journal",3]],["parc",3]],[[["journal",3]],["weak",3]],[[["journal",3]],[["parc",3],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["journal",3]],["string",3]],[[["journal",3]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["journal",3]],[["trylockresult",6],["mutexguard",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["vweak",3]],[[["journal",3]],[["parc",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[["fn",8],["fnmut",8]]],[[]],[[["fn",8]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["fnmut",8]]],[[["fnmut",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["u64",15]],["u64",15]],[[]],[[],["option",4]],[[]],[[]],[[],["i64",15]],[[]],[[["u64",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[["journal",3]]],[[]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["fn",8]],["vec",3]],[[]],[[["vec",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["journal",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["string",3]],[["vec",3],["u8",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["journal",3]]],[[]],[[["usize",15],["journal",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["u64",15]],[[["vec",3]],[["ordering",4],["option",4]]],[[["journal",3]]],[[["journal",3]],["vec",3]],[[["journal",3]],["vec",3]],[[["box",3],["journal",3]],["vec",3]],[[["journal",3],["str",15]],[["vec",3],["u8",15]]],[[],["option",4]],[[["journal",3]]],[[["usize",15]]],[[["usize",15],["journal",3]]],[[]],[[["usize",15]]],[[["usize",15],["journal",3]]],[[["journal",3]]],[[["usize",15],["journal",3]]],[[["usize",15]]],[[["journal",3]],["string",3]],[[],["str",15]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["usize",15],["journal",3]]]],"p":[[3,"AssertTxInSafe"],[8,"RootObj"],[8,"MemPool"],[3,"BuddyAlg"],[3,"Zones"],[8,"PmemUsage"],[3,"Heap"],[3,"Pbox"],[3,"PCell"],[3,"PRefCell"],[3,"Ref"],[3,"RefMut"],[3,"RootCell"],[3,"VCell"],[3,"TCell"],[3,"LazyCell"],[8,"PClone"],[8,"PFrom"],[3,"BuddyAlloc"],[3,"Weak"],[3,"Prc"],[3,"PrcBox"],[3,"VWeak"],[3,"NonNull"],[3,"Slice"],[3,"LogNonNull"],[3,"Ptr"],[4,"Measure"],[4,"Notifier"],[4,"LogEnum"],[3,"Chaperon"],[3,"Journal"],[3,"Log"],[8,"Logger"],[3,"Scratchpad"],[3,"Scratchpad"],[3,"String"],[8,"ToStringSlice"],[8,"ToPString"],[3,"Weak"],[3,"Parc"],[3,"PMutex"],[3,"MutexGuard"],[3,"ParcInner"],[3,"VWeak"],[3,"SpinLock"],[3,"Ring"],[3,"Vec"],[3,"IntoIteratorHelper"],[3,"IterHelper"]]}\
}');
initSearch(searchIndex);