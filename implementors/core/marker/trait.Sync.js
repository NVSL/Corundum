(function() {var implementors = {};
implementors["corundum"] = [{"text":"impl Sync for BuddyAlloc","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for BuddyAlg&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Sync for Zones&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Heap","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Sync for Pbox&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Sync for PrcBox&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Sync for ParcInner&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Sync for Parc&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LogEnum","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Sync for Notifier&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Sync for Log&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Sync for String&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIteratorHelper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterHelper&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Measure&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AssertTxInSafe&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for PCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for PRefCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool, '_&gt; !Sync for Ref&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool, '_&gt; !Sync for RefMut&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool, '_&gt; !Sync for RootCell&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, A:&nbsp;MemPool&gt; !Sync for VCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for Prc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for Weak&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for VWeak&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send, A:&nbsp;MemPool&gt; Sync for PMutex&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync, A:&nbsp;MemPool, '_&gt; Sync for MutexGuard&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for Weak&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSend + ?Sized, A:&nbsp;MemPool&gt; Sync for VWeak&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool, T&gt; !Sync for FatPtr&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool, T&gt; !Sync for Ptr&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; !Sync for NonNull&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A:&nbsp;MemPool&gt; !Sync for LogNonNull&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Chaperon","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool&gt; !Sync for Journal&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, A:&nbsp;MemPool&gt; !Sync for Vec&lt;T, A&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()