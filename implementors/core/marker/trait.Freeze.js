(function() {var implementors = {};
implementors["corundum"] = [{"text":"impl&lt;A&gt; Freeze for BuddyAlg&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Freeze for Zones&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Heap","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for Pbox&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Freeze for PCell&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Freeze for PRefCell&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'b, T:&nbsp;?Sized, A&gt; Freeze for Ref&lt;'b, T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'b, T:&nbsp;?Sized, A&gt; Freeze for RefMut&lt;'b, T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, A&gt; Freeze for RootCell&lt;'a, T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Freeze for VCell&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for PrcBox&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for Prc&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for Weak&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for VWeak&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; !Freeze for PMutex&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, A&gt; Freeze for MutexGuard&lt;'a, T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for ParcInner&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for Parc&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for Weak&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for VWeak&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Freeze for FatPtr&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for Ptr&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for NonNull&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, A&gt; Freeze for LogNonNull&lt;T, A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Chaperon","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Journal&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LogEnum","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Notifier&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Log&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for String&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Freeze for Vec&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIteratorHelper&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterHelper&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Measure&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AssertTxInSafe&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BuddyAlloc","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()