(function() {var implementors = {};
implementors["corundum"] = [{"text":"impl&lt;T:&nbsp;PSafe + PartialOrd + ?Sized, A:&nbsp;MemPool&gt; PartialOrd&lt;Pbox&lt;T, A&gt;&gt; for Pbox&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + PartialOrd + Copy, A:&nbsp;MemPool&gt; PartialOrd&lt;LogCell&lt;T, A&gt;&gt; for LogCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + PartialOrd + ?Sized, A:&nbsp;MemPool&gt; PartialOrd&lt;LogRefCell&lt;T, A&gt;&gt; for LogRefCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + PartialOrd, A:&nbsp;MemPool, '_&gt; PartialOrd&lt;RootCell&lt;'_, T, A&gt;&gt; for RootCell&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + VSafe + PartialOrd + Copy, A:&nbsp;MemPool&gt; PartialOrd&lt;VCell&lt;T, A&gt;&gt; for VCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + VSafe + PartialOrd + Copy, A:&nbsp;MemPool&gt; PartialOrd&lt;T&gt; for VCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PartialOrd + PSafe + ?Sized, A:&nbsp;MemPool&gt; PartialOrd&lt;Prc&lt;T, A&gt;&gt; for Prc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PartialOrd + PSafe + ?Sized, A:&nbsp;MemPool&gt; PartialOrd&lt;Parc&lt;T, A&gt;&gt; for Parc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;PartialOrd + MemPool&gt; PartialOrd&lt;String&lt;A&gt;&gt; for String&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool, T:&nbsp;PSafe + PartialOrd&gt; PartialOrd&lt;Vec&lt;T, A&gt;&gt; for Vec&lt;T, A&gt;","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl PartialOrd&lt;Sign&gt; for Sign","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; PartialOrd&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl PartialOrd&lt;Ident&gt; for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl PartialOrd&lt;Span&gt; for Span","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Position&gt; for Position","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Literal&gt; for Literal","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassUnicodeRange&gt; for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;ClassBytesRange&gt; for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Sequence&gt; for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl PartialOrd&lt;Utf8Range&gt; for Utf8Range","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl PartialOrd&lt;Lifetime&gt; for Lifetime","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()