var searchIndex = JSON.parse('{\
"corundum":{"doc":"<em>Corundum</em> is a crate with an idiomatic persistent memory …","i":[[24,"PClone","corundum","",null,null],[24,"Root","","",null,null],[0,"alloc","","Persistent Memory allocation APIs",null,null],[0,"heap","corundum::alloc","",null,null],[0,"prc","corundum::alloc::heap","",null,null],[6,"PWeak","corundum::alloc::heap::prc","Compact form of <code>prc::Weak</code> <code><</code><code>Heap</code><code>></code>.",null,null],[6,"VWeak","","Compact form of <code>prc::VWeak</code> <code><</code><code>Heap</code><code>></code>.",null,null],[0,"parc","corundum::alloc::heap","",null,null],[6,"PWeak","corundum::alloc::heap::parc","Compact form of <code>sync::Weak</code> <code><</code><code>Heap</code><code>></code>.",null,null],[6,"VWeak","","Compact form of <code>sync::VWeak</code> <code><</code><code>Heap</code><code>></code>.",null,null],[3,"Heap","corundum::alloc::heap","A pass-through allocator for volatile memory",null,null],[6,"Pbox","","Compact form of <code>Pbox</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"Prc","","Compact form of <code>Prc</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"Parc","","Compact form of <code>Parc</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"PMutex","","Compact form of <code>PMutex</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"PCell","","Compact form of <code>PCell</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"PNonNull","","Compact form of <code>LogNonNull</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"PRefCell","","Compact form of <code>PRefCell</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"PRef","","Compact form of <code>Ref</code> <code><\'b, T, </code><code>Heap</code><code>></code>.",null,null],[6,"PRefMut","","Compact form of <code>RefMut</code> <code><\'b, T, </code><code>Heap</code><code>></code>.",null,null],[6,"VCell","","Compact form of <code>[VCell](../../cell/struct.VCell.html) </code><T,<code>[</code>…",null,null],[6,"PVec","","Compact form of <code>Vec</code> <code><T,</code><code>Heap</code><code>></code>.",null,null],[6,"PString","","Compact form of <code>String</code> <code><</code><code>Heap</code><code>></code>.",null,null],[6,"Journal","","Compact form of <code>Journal</code> <code><</code><code>Heap</code><code>></code>.",null,null],[0,"open_flags","corundum::alloc","Open pool flags",null,null],[17,"O_C","corundum::alloc::open_flags","Open Flag: Create the pool memory file",null,null],[17,"O_F","","Open Flag: Formats the pool memory file if file exists, …",null,null],[17,"O_CNE","","Open Flag: Creates pool memory file only if it does not …",null,null],[17,"O_CF","","Open Flag: Creates and formats a new file",null,null],[17,"O_CFNE","","Open Flag: Creates and formats pool memory file only if …",null,null],[17,"O_1GB","","Open Flag: Creates a pool memory file of size 1GB",null,null],[17,"O_2GB","","Open Flag: Creates a pool memory file of size 2GB",null,null],[17,"O_4GB","","Open Flag: Creates a pool memory file of size 4GB",null,null],[17,"O_8GB","","Open Flag: Creates a pool memory file of size 8GB",null,null],[17,"O_16GB","","Open Flag: Creates a pool memory file of size 16GB",null,null],[17,"O_32GB","","Open Flag: Creates a pool memory file of size 32GB",null,null],[17,"O_64GB","","Open Flag: Creates a pool memory file of size 64GB",null,null],[17,"O_128GB","","Open Flag: Creates a pool memory file of size 128GB",null,null],[17,"O_256GB","","Open Flag: Creates a pool memory file of size 256GB",null,null],[17,"O_512GB","","Open Flag: Creates a pool memory file of size 512GB",null,null],[17,"O_1TB","","Open Flag: Creates a pool memory file of size 1TB",null,null],[17,"O_2TB","","Open Flag: Creates a pool memory file of size 2TB",null,null],[17,"O_4TB","","Open Flag: Creates a pool memory file of size 4TB",null,null],[17,"O_8TB","","Open Flag: Creates a pool memory file of size 8TB",null,null],[17,"O_16TB","","Open Flag: Creates a pool memory file of size 16TB",null,null],[17,"O_32TB","","Open Flag: Creates a pool memory file of size 32TB",null,null],[17,"O_64TB","","Open Flag: Creates a pool memory file of size 64TB",null,null],[3,"BuddyAlg","corundum::alloc","Buddy Allocation Algorithm",null,null],[5,"get_idx","","",null,[[]]],[3,"Zones","","Memory Zones",null,null],[17,"DEFAULT_POOL_SIZE","","Default pool memory size to be used while creating a new …",null,null],[17,"O_C","","Open Flag: Create the pool memory file",null,null],[17,"O_F","","Open Flag: Formats the pool memory file if file exists, …",null,null],[17,"O_CNE","","Open Flag: Creates pool memory file only if it does not …",null,null],[17,"O_CF","","Open Flag: Creates and formats a new file",null,null],[17,"O_CFNE","","Open Flag: Creates and formats pool memory file only if …",null,null],[17,"O_1GB","","Open Flag: Creates a pool memory file of size 1GB",null,null],[17,"O_2GB","","Open Flag: Creates a pool memory file of size 2GB",null,null],[17,"O_4GB","","Open Flag: Creates a pool memory file of size 4GB",null,null],[17,"O_8GB","","Open Flag: Creates a pool memory file of size 8GB",null,null],[17,"O_16GB","","Open Flag: Creates a pool memory file of size 16GB",null,null],[17,"O_32GB","","Open Flag: Creates a pool memory file of size 32GB",null,null],[17,"O_64GB","","Open Flag: Creates a pool memory file of size 64GB",null,null],[17,"O_128GB","","Open Flag: Creates a pool memory file of size 128GB",null,null],[17,"O_256GB","","Open Flag: Creates a pool memory file of size 256GB",null,null],[17,"O_512GB","","Open Flag: Creates a pool memory file of size 512GB",null,null],[17,"O_1TB","","Open Flag: Creates a pool memory file of size 1TB",null,null],[17,"O_2TB","","Open Flag: Creates a pool memory file of size 2TB",null,null],[17,"O_4TB","","Open Flag: Creates a pool memory file of size 4TB",null,null],[17,"O_8TB","","Open Flag: Creates a pool memory file of size 8TB",null,null],[17,"O_16TB","","Open Flag: Creates a pool memory file of size 16TB",null,null],[17,"O_32TB","","Open Flag: Creates a pool memory file of size 32TB",null,null],[17,"O_64TB","","Open Flag: Creates a pool memory file of size 64TB",null,null],[17,"FLAG_HAS_ROOT","","Shows that the pool has a root object",null,null],[8,"MemPool","","Persistent Memory Pool",null,null],[11,"name","","Returns the name of the pool type",0,[[]]],[11,"open_no_root","","Opens a new pool without any root object. This function …",0,[[],["result",6]]],[11,"close","","Commits all changes and clears the logs for all threads",0,[[],["result",6]]],[11,"zone","","Returns the zone index corresponding to a given address",0,[[]]],[11,"open","","Opens a pool and retrieves the root object",0,[[],[["result",6],["rootcell",3]]]],[11,"is_open","","Returns true if the pool is open",0,[[]]],[11,"format","","Formats the memory pool file",0,[[],["result",6]]],[11,"apply_flags","","Applies open pool flags",0,[[],["result",6]]],[11,"allocated","","Indicates if the given offset is allocated",0,[[]]],[11,"off_unchecked","","Translates raw pointers to memory offsets",0,[[]]],[11,"get_unchecked","","Acquires a reference pointer to the object",0,[[]]],[11,"get_mut_unchecked","","Acquires a mutable reference to the object",0,[[]]],[11,"deref_slice_unchecked","","Acquires a reference to the slice",0,[[]]],[11,"deref_slice_unchecked_mut","","Acquires a mutable reference to the slice",0,[[]]],[11,"deref","","Acquires a reference to the object",0,[[],["result",6]]],[11,"deref_mut","","Acquires a mutable reference pointer to the object",0,[[],["result",6]]],[11,"off","","Translates raw pointers to memory offsets",0,[[],["result",6]]],[11,"rng","","Valid Virtual Address Range",0,[[],["range",3]]],[11,"start","","Start of virtual address range",0,[[]]],[11,"end","","End of virtual address range",0,[[]]],[11,"size","","Total size of the memory pool",0,[[]]],[11,"available","","Available space in the pool",0,[[]]],[11,"used","","Total occupied space",0,[[]]],[11,"valid","","Checks if the reference <code>p</code> belongs to this pool",0,[[]]],[11,"contains","","Checks if <code>addr</code> is in the valid address range if this …",0,[[]]],[11,"alloc","","Allocate memory as described by the given <code>size</code>.",0,[[]]],[11,"dealloc","","Deallocate the block of memory at the given <code>ptr</code> pointer …",0,[[]]],[10,"pre_alloc","","Prepares allocation without performing it",0,[[]]],[10,"pre_dealloc","","Prepares deallocation without performing it",0,[[]]],[11,"log64","","Adds a low-level log to update as 64-bit <code>obj</code> to <code>val</code> when  …",0,[[]]],[11,"drop_on_failure","","Adds a low-level <code>DropOnFailure</code> log to perform inside the …",0,[[]]],[11,"prepare","","In case of not using <code>pre_alloc</code> or <code>pre_dealloc</code>, starts a …",0,[[]]],[11,"perform","","Performs the prepared operations",0,[[]]],[11,"discard","","Discards the prepared operations",0,[[]]],[11,"alloc_zeroed","","Behaves like <code>alloc</code>, but also ensures that the contents …",0,[[]]],[11,"new","","Allocates new memory and then places <code>x</code> into it with …",0,[[["journal",3],["psafe",8]]]],[11,"new_slice","","Allocates a new slice and then places <code>x</code> into it with …",0,[[["journal",3]]]],[11,"atomic_new","","Allocates new memory and then places <code>x</code> into it without …",0,[[]]],[11,"atomic_new_slice","","Allocates new memory and then places <code>x</code> into it without …",0,[[]]],[11,"new_uninit","","Allocates new memory without copying data",0,[[["journal",3]]]],[11,"new_uninit_for_layout","","Allocates new memory without copying data",0,[[["journal",3]]]],[11,"atomic_new_uninit","","Allocates new memory without copying data and realizing …",0,[[]]],[11,"alloc_for_value","","Allocates new memory for value <code>x</code>",0,[[]]],[11,"free","","Creates a <code>DropOnCommit</code> log for the value <code>x</code>",0,[[]]],[11,"free_slice","","Creates a <code>DropOnCommit</code> log for the value <code>x</code>",0,[[]]],[11,"free_nolog","","Frees the allocation for value <code>x</code> immediately",0,[[]]],[11,"drop_journal","","Drops a <code>journal</code> from memory",0,[[["journal",3]]]],[11,"journals_head","","Returns a reference to the offset of the first journal",0,[[]]],[11,"journals","","Runs a closure with a mutable reference to a …",0,[[["fn",8]]]],[11,"recover","","Recovers from a crash",0,[[]]],[11,"commit","","Commits all changes and clears the logs for one thread",0,[[]]],[11,"commit_no_clear","","Commits all changes without clearing the logs",0,[[]]],[11,"clear","","Clears the logs",0,[[]]],[11,"rollback","","Discards all changes and clears the logs",0,[[]]],[11,"rollback_no_clear","","Discards all changes without clearing the logs",0,[[]]],[11,"transaction","","Executes commands atomically with respect to system …",0,[[["fnonce",8]],["result",6]]],[11,"gen","","",0,[[]]],[11,"print_info","","Prints memory information",0,[[]]],[8,"PmemUsage","","Determines how much of the <code>MemPool</code> is used for the trait …",null,null],[11,"size_of","","Size of the object on Persistent Memory Assuming that …",1,[[]]],[11,"size_of_pmem","","Size of the object on Persistent Memory including <code>Self</code> …",1,[[]]],[0,"boxed","corundum","A persistent pointer type for persistent memory allocation",null,null],[3,"Pbox","corundum::boxed","A pointer type for persistent heap allocation.",null,null],[11,"new","","Allocates memory on the persistent heap and then places <code>x</code> …",2,[[["journal",3]],["pbox",3]]],[11,"off","","",2,[[]]],[11,"new_uninit","","Constructs a new Pbox with uninitialized contents.",2,[[["journal",3]],[["maybeuninit",19],["pbox",3]]]],[11,"new_zeroed","","Constructs a new <code>Pbox</code> with uninitialized contents, with …",2,[[["journal",3]],[["maybeuninit",19],["pbox",3]]]],[11,"pin","","Constructs a new <code>Pin<Pbox<T, A>></code>. If <code>T</code> does not implement …",2,[[["journal",3]],[["pbox",3],["pin",3]]]],[11,"assume_init","","Converts to <code>Pbox<T, A></code>.",2,[[],["pbox",3]]],[11,"initialize","","Initializes boxed data with <code>value</code> in-place if it is <code>None</code>",2,[[["option",4]],["result",6]]],[11,"from_raw","","Constructs a box from a raw pointer.",2,[[]]],[11,"into_raw","","Consumes the <code>Pbox</code>, returning a wrapped raw pointer.",2,[[["pbox",3]]]],[11,"into_raw_non_null","","Consumes the <code>Pbox</code>, returning the wrapped pointer as …",2,[[["pbox",3]],["nonnull",3]]],[11,"leak","","Consumes and leaks the <code>Pbox</code>, returning a mutable …",2,[[["pbox",3]]]],[11,"into_pin","","Converts a <code>Pbox<T, A></code> into a <code>Pin<Pbox<T, A>></code>",2,[[["pbox",3]],[["pbox",3],["pin",3]]]],[11,"as_mut","","",2,[[]]],[0,"cell","corundum","Persistent shareable mutable containers",null,null],[3,"PCell","corundum::cell","A persistent mutable memory location with recoverability",null,null],[3,"PRefCell","","A persistent memory location with safe interior …",null,null],[3,"Ref","","",null,null],[3,"RefMut","","",null,null],[3,"RootCell","","Root object container",null,null],[8,"RootObj","","Creates a default value of the type",null,null],[10,"init","","",3,[[["journal",3]]]],[3,"VCell","","A persistent memory location containing a volatile data",null,null],[0,"clone","corundum","The <code>PClone</code> trait for types that cannot be \'implicitly …",null,null],[8,"PClone","corundum::clone","A common trait for the ability to explicitly duplicate an …",null,null],[10,"pclone","","",4,[[["journal",3]]]],[11,"pclone_from","","Performs copy-assignment from <code>source</code>.",4,[[["journal",3]]]],[0,"ll","corundum","Low-level utils",null,null],[5,"cpu","corundum::ll","",null,[[]]],[5,"persist","","Synchronize caches and memories and acts like a write …",null,[[]]],[5,"persist_obj","","Synchronize caches and memories and acts like a write …",null,[[]]],[5,"clflush","","Flushes cache line back to memory",null,[[]]],[5,"clflush_obj","","Flushes cache lines of a whole object back to memory",null,[[]]],[5,"sfence","","Store fence",null,[[]]],[5,"mfence","","Memory fence",null,[[]]],[0,"prc","corundum","Single-threaded reference-counting persistent pointers",null,null],[3,"PrcBox","corundum::prc","",null,null],[3,"Prc","","A single-thread reference-counting persistent pointer. …",null,null],[11,"new","","Constructs a new <code>Prc<T></code>.",5,[[["journal",3]],["prc",3]]],[11,"new_uninit","","Constructs a new <code>Prc</code> with uninitialized contents.",5,[[["journal",3]],[["maybeuninit",19],["prc",3]]]],[11,"new_zeroed","","Constructs a new <code>Prc</code> with uninitialized contents, with …",5,[[["journal",3]],[["maybeuninit",19],["prc",3]]]],[11,"from","","Owns contents of <code>p</code> without cloning, leaving <code>p</code> untouched",5,[[["prc",3]]]],[11,"assume_init","","Converts to <code>Rc<T></code>.",5,[[],["prc",3]]],[11,"get_mut","","Returns a mutable reference into the given <code>Prc</code>, if there …",5,[[],[["option",4],["maybeuninit",19]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given <code>Prc</code>, without …",5,[[],["maybeuninit",19]]],[11,"downgrade","","Creates a new <code>Weak</code> persistent pointer to this allocation.",5,[[["journal",3]],["weak",3]]],[11,"demote","","Creates a new <code>Weak</code> volatile to this allocation.",5,[[],["vweak",3]]],[11,"unsafe_demote","","Demote without dynamically checking transaction boundaries",5,[[],["vweak",3]]],[11,"weak_count","","Gets the number of <code>Weak</code> pointers to this allocation.",5,[[]]],[11,"strong_count","","Gets the number of <code>Weak</code> pointers to this allocation.",5,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Prc</code>s point to the same allocation …",5,[[]]],[11,"initialize","","Initializes boxed data with <code>value</code> in-place if it is <code>None</code>",5,[[["option",4]],["result",6]]],[3,"Weak","","<code>Weak</code> is a version of <code>Prc</code> that holds a non-owning …",null,null],[11,"as_raw","","",6,[[]]],[11,"into_raw","","",6,[[]]],[11,"from_raw","","",6,[[]]],[11,"new","","Creates a new dangling weak pointer",6,[[],["weak",3]]],[11,"upgrade","","",6,[[["journal",3]],[["option",4],["prc",3]]]],[11,"strong_count","","",6,[[]]],[11,"weak_count","","",6,[[],["option",4]]],[11,"ptr_eq","","",6,[[]]],[5,"ws","","",null,[[["prc",3]]]],[3,"VWeak","","<code>VWeak</code> is a version of <code>Prc</code> that holds a non-owning …",null,null],[11,"null","","",7,[[],["vweak",3]]],[11,"promote","","",7,[[["journal",3]],[["option",4],["prc",3]]]],[0,"sync","corundum","Useful synchronization primitives",null,null],[3,"PMutex","corundum::sync","A transaction-wide recursive mutual exclusion primitive …",null,null],[3,"MutexGuard","","",null,null],[5,"init_lock","","",null,[[]]],[3,"ParcInner","","The <code>Parc</code>\'s inner data type",null,null],[3,"Parc","","A thread-safe reference-counting persistent pointer. …",null,null],[3,"Weak","","<code>Weak</code> is a version of [<code>Parc</code>] that holds a non-owning …",null,null],[3,"VWeak","","<code>VWeak</code> is a version of [<code>Parc</code>] that holds a non-owning …",null,null],[0,"ptr","corundum","Manually manage memory through raw pointers",null,null],[3,"FatPtr","corundum::ptr","A persistent fat pointer with offset and capacity",null,null],[3,"Ptr","","A wrapper around a raw persistent pointer that indicates …",null,null],[3,"NonNull","","An unsafe pointer with dereferencing capability",null,null],[3,"LogNonNull","","An unsafe pointer with dereferencing and logging …",null,null],[0,"stm","corundum","Software transactional memory APIs",null,null],[0,"journal","corundum::stm","The journal object for keeping logs",null,null],[17,"JOURNAL_COMMITTED","corundum::stm::journal","Determines that the changes are committed",null,null],[3,"Journal","","A Journal object to be used for writing logs onto",null,null],[11,"new","","Create new <code>Journal</code> with default values",8,[[]]],[11,"is_committed","","Returns true if the journal is committed",8,[[]]],[11,"is_set","","Checks a flag",8,[[]]],[11,"enter_into","","Atomically enters into the list journals of the owner pool",8,[[]]],[11,"print_pages","","",8,[[]]],[11,"commit","","Commits all logs in the journal",8,[[]]],[11,"rollback","","Reverts all changes",8,[[]]],[11,"recover","","Recovers from a crash or power failure",8,[[]]],[11,"clear","","Clears all logs and drops itself from the memory pool",8,[[]]],[11,"fast_forward","","Determines whether to fast-forward or rollback the …",8,[[]]],[11,"next_off","","Returns the offset of the next journal, if any. …",8,[[]]],[11,"prev_off","","Returns the offset of the previous journal, if any. …",8,[[]]],[11,"next_off_ref","","",8,[[]]],[11,"prev_off_ref","","",8,[[]]],[11,"is_running","","Returns true if there is a running transaction on the …",8,[[]]],[11,"ignore","","Ignores all logs",8,[[]]],[3,"Chaperon","corundum::stm","A third-party observer for multi-pool transactions ",null,null],[4,"LogEnum","","Log Types",null,null],[13,"DataLog","","<code>(src, log, len)</code>: An undo log of slice <code>src..src+len</code> kept in…",9,null],[13,"DropOnAbort","","<code>(u64, usize)</code>: Similar to <code>DropOnFailure</code> except that it …",9,null],[13,"DropOnCommit","","<code>(src, len)</code>: A drop log indicating that slice <code>src..src+len</code> …",9,null],[13,"DropOnFailure","","<code>(src, len)</code>: A drop log indicating that slice <code>src..src+len</code> …",9,null],[13,"RecountOnFailure","","<code>(src, inc/dec)</code>: A log indicating that the object is a …",9,null],[13,"UnlockOnCommit","","Unlocks a <code>PMutex</code> on transaction commit.",9,null],[13,"None","","",9,null],[4,"Notifier","","A data-log notification type",null,null],[13,"Atomic","","Atomically update the log flag",10,null],[13,"NonAtomic","","Non-atomically update the flag",10,null],[13,"None","","There is no log flag",10,null],[3,"Log","","The <code>Log</code> type for pool <code>A</code>",null,null],[8,"Logger","","A generic trait for taking a log of any type",null,null],[10,"take_log","","Takes a log of <code>self</code> and update the log flag if specified …",11,[[["journal",3],["notifier",4]],[["log",3],["ptr",3]]]],[5,"transaction","","Atomically executes commands",null,[[["fnonce",8]],["result",6]]],[0,"str","corundum","Persistent unicode string slices",null,null],[3,"String","corundum::str","A UTF-8 encoded, growable string.",null,null],[11,"new","","Creates a new empty <code>String</code>.",12,[[],["string",3]]],[11,"with_capacity","","Creates a new empty <code>String</code> with a particular capacity.",12,[[["journal",3]],["string",3]]],[11,"from_str","","Creates a <code>String</code> from <code>&str</code>",12,[[["journal",3]],["string",3]]],[11,"from_utf8","","Converts a vector of bytes to a <code>String</code>.",12,[[["stdvec",3],["journal",3]],[["string",3],["result",4],["fromutf8error",3]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a persistent string, …",12,[[["journal",3]],["string",3]]],[11,"from_utf16","","Decode a UTF-16 encoded vector <code>v</code> into a <code>String</code>, returning …",12,[[["journal",3]],[["result",4],["string",3]]]],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, replacing …",12,[[["journal",3]],["string",3]]],[11,"from_utf8_unchecked","","Converts a vector of bytes to a <code>String</code> without checking …",12,[[["stdvec",3],["journal",3]],["string",3]]],[11,"into_bytes","","Converts a <code>String</code> into a byte vector.",12,[[],["vec",3]]],[11,"as_str","","Extracts a string slice containing the entire <code>String</code>.",12,[[]]],[11,"push_str","","Appends a given string slice onto the end of this <code>String</code>.",12,[[["journal",3]]]],[11,"capacity","","Returns this <code>String</code>\'s capacity, in bytes.",12,[[]]],[11,"reserve","","Ensures that this <code>String</code>\'s capacity is at least <code>additional</code>…",12,[[["journal",3]]]],[11,"shrink_to_fit","","Shrinks the capacity of this <code>String</code> to match its length.",12,[[["journal",3]]]],[11,"shrink_to","","Shrinks the capacity of this <code>String</code> with a lower bound.",12,[[["journal",3]]]],[11,"push","","Appends the given <code>char</code> to the end of this <code>String</code>.",12,[[["journal",3]]]],[11,"as_bytes","","Returns a byte slice of this <code>String</code>\'s contents.",12,[[]]],[11,"truncate","","Shortens this <code>String</code> to the specified length.",12,[[]]],[11,"pop","","Removes the last character from the string buffer and …",12,[[],["option",4]]],[11,"remove","","Removes a <code>char</code> from this <code>String</code> at a byte position and …",12,[[]]],[11,"retain","","Retains only the characters specified by the predicate.",12,[[]]],[11,"insert","","Inserts a character into this <code>String</code> at a byte position.",12,[[["journal",3]]]],[11,"insert_str","","Inserts a string slice into this <code>String</code> at a byte …",12,[[["journal",3]]]],[11,"len","","Returns the length of this <code>String</code>, in bytes, not [<code>char</code>]s …",12,[[]]],[11,"is_empty","","Returns <code>true</code> if this <code>String</code> has a length of zero, and …",12,[[]]],[11,"split_off","","Splits the string into two at the given index.",12,[[["journal",3]],["string",3]]],[11,"clear","","Truncates this <code>String</code>, removing all contents.",12,[[]]],[11,"replace_range","","Removes the specified range in the string, and replaces …",12,[[["journal",3]]]],[8,"ToStringSlice","","",null,null],[10,"to_pstring","","Converts the given value to a <code>String</code>.",13,[[["journal",3]],[["string",3],["stdvec",3]]]],[8,"ToPString","","",null,null],[10,"to_pstring","","Converts the given value to a <code>String</code>.",14,[[["journal",3]],["string",3]]],[0,"vec","corundum","A contiguous growable array type with heap-allocated …",null,null],[3,"Vec","corundum::vec","A contiguous growable persistent array type, written …",null,null],[11,"new","","Creates an empty vector with zero capacity for the pool …",15,[[]]],[11,"from_slice","","Creates an empty vector and places <code>x</code> into it",15,[[["journal",3]]]],[11,"with_capacity","","Creates an empty <code>Vec</code> with the specified capacity",15,[[["journal",3]]]],[11,"empty","","Creates an empty vector with zero capacity",15,[[]]],[11,"is_empty","","Returns <code>true</code> if the vector contains no elements.",15,[[]]],[11,"split_off","","Splits the collection into two at the given index.",15,[[["journal",3]]]],[11,"off","","Returns the offset of the vector in the persistent pool",15,[[]]],[11,"capacity","","Returns the available capacity of the vector in the …",15,[[]]],[11,"set_len","","Forces the length of the vector to <code>new_len</code>.",15,[[]]],[11,"len","","Returns the length of the vector",15,[[]]],[11,"as_slice","","Consumes the vector and converts it into a slice",15,[[]]],[11,"extend_from_slice","","Copy all the elements of <code>other</code> into <code>Self</code>",15,[[["journal",3]]]],[11,"shrink_to","","",15,[[["journal",3]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",15,[[["journal",3]]]],[11,"reserve","","Copy all the elements of <code>other</code> into <code>Self</code>",15,[[["journal",3]]]],[11,"truncate","","Shortens the vector, keeping the first <code>len</code> elements and …",15,[[]]],[11,"swap_remove","","Removes an element from the vector and returns it.",15,[[]]],[11,"insert","","Inserts an element at position <code>index</code> within the vector, …",15,[[["journal",3]]]],[11,"remove","","Removes and returns the element at position <code>index</code> within …",15,[[]]],[11,"retain","","Retains only the elements specified by the predicate.",15,[[]]],[11,"push","","Heap::transaction(|j| { Heap::transaction(|j| { Appends …",15,[[["journal",3]]]],[11,"pop","","Removes the last element from a vector and returns it, or …",15,[[],["option",4]]],[11,"append","","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …",15,[[["journal",3]]]],[11,"clear","","Clears the vector, removing all values.",15,[[]]],[11,"cast","","",15,[[["fn",8]],["vec",3]]],[3,"IntoIteratorHelper","","",null,null],[3,"IterHelper","","",null,null],[11,"to_str","","",15,[[]]],[0,"convert","corundum","",null,null],[8,"PFrom","corundum::convert","An equivalent to [<code>From</code>] for persistent memory which …",null,null],[10,"pfrom","","",16,[[["journal",3]]]],[0,"stat","corundum","",null,null],[4,"Measure","corundum::stat","",null,null],[13,"Sync","","",17,null],[13,"Alloc","","",17,null],[13,"Dealloc","","",17,null],[13,"Deref","","",17,null],[13,"DropLog","","",17,null],[13,"DataLog","","",17,null],[13,"MutexLog","","",17,null],[13,"CommitLog","","",17,null],[13,"RollbackLog","","",17,null],[13,"ClearLog","","",17,null],[13,"NewPage","","",17,null],[13,"NewJournal","","",17,null],[13,"Logging","","",17,null],[13,"Nop","","",17,null],[13,"Custom","","",17,null],[13,"Batch","","",17,null],[13,"Transaction","","",17,null],[13,"Unknown","","",17,null],[5,"report","","",null,[[],["string",3]]],[0,"default","corundum","The default allocator module",null,null],[0,"prc","corundum::default","",null,null],[6,"PWeak","corundum::default::prc","Compact form of <code>prc::Weak</code> <code><</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"VWeak","","Compact form of <code>prc::VWeak</code> <code><</code><code>BuddyAlloc</code><code>></code>.",null,null],[0,"parc","corundum::default","",null,null],[6,"PWeak","corundum::default::parc","Compact form of <code>sync::Weak</code> <code><</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"VWeak","","Compact form of <code>sync::VWeak</code> <code><</code><code>BuddyAlloc</code><code>></code>.",null,null],[3,"RootCell","corundum::default","Root object container",null,null],[8,"RootObj","","Creates a default value of the type",null,null],[10,"init","","",3,[[["journal",3]]]],[3,"Ptr","","A wrapper around a raw persistent pointer that indicates …",null,null],[3,"BuddyAlloc","","A memory allocator with buddy allocation mechanism",null,null],[11,"open_impl","","Opens a memory pool file and returns an instance of …",18,[[],["result",6]]],[6,"Pbox","","Compact form of <code>Pbox</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"Prc","","Compact form of <code>Prc</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"Parc","","Compact form of <code>Parc</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PMutex","","Compact form of <code>PMutex</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PCell","","Compact form of <code>PCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PNonNull","","Compact form of <code>LogNonNull</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PRefCell","","Compact form of <code>PRefCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PRef","","Compact form of <code>Ref</code> <code><\'b, T, </code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PRefMut","","Compact form of <code>RefMut</code> <code><\'b, T, </code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"VCell","","Compact form of <code>VCell</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PVec","","Compact form of <code>Vec</code> <code><T,</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"PString","","Compact form of <code>String</code> <code><</code><code>BuddyAlloc</code><code>></code>.",null,null],[6,"Journal","","Compact form of <code>Journal</code> <code><</code><code>BuddyAlloc</code><code>></code>.",null,null],[0,"result","corundum","A <code>Result</code> type with string error messages",null,null],[6,"Result","corundum::result","",null,null],[8,"RootObj","corundum","Creates a default value of the type",null,null],[10,"init","","",3,[[["journal",3]]]],[8,"PSafe","","It marks the implementing type to be free of pointers to …",null,null],[8,"TxOutSafe","","It marks the implementing type to be safe crossing …",null,null],[8,"TxInSafe","","It is equal to UnwindSafe, but is used to ensure doubly …",null,null],[8,"LooseTxInUnsafe","","The implementing type can be asserted <code>TxInSafe</code> albeit …",null,null],[3,"AssertTxInSafe","","A simple wrapper around a type to assert that it is safe …",null,null],[12,"0","","",19,null],[8,"VSafe","","Safe to be stored in volatile memory useful in <code>VCell</code> type …",null,null],[8,"PSend","","Safe to be sent to another thread",null,null],[14,"pool","","This macro creates a new pool module and aliases for …",null,null],[14,"static_inner","","This macro can be used to access static data of an …",null,null],[14,"measure","","",null,null],[14,"log","","",null,null],[11,"from","corundum::alloc","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","corundum::alloc::heap","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"to_pstring","corundum::boxed","",2,[[["journal",3]],["string",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","corundum::cell","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"to_pstring","","",24,[[["journal",3]],["string",3]]],[11,"from","","",24,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"to_pstring","","",25,[[["journal",3]],["string",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"to_pstring","","",26,[[["journal",3]],["string",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"to_pstring","","",27,[[["journal",3]],["string",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","corundum::prc","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"to_pstring","","",5,[[["journal",3]],["string",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","corundum::sync","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"to_pstring","","",31,[[["journal",3]],["string",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"to_pstring","","",33,[[["journal",3]],["string",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","corundum::ptr","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"to_pstring","","",37,[[["journal",3]],["string",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"to_pstring","","",38,[[["journal",3]],["string",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"to_pstring","","",39,[[["journal",3]],["string",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","corundum::stm","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","corundum::stm::journal","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","corundum::stm","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"to_pstring","corundum::str","",12,[[["journal",3]],["string",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"to_pstring","corundum::vec","",15,[[["journal",3]],["string",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","corundum::stat","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","corundum","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"into_future","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","corundum::default","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"name","corundum::alloc::heap","",22,[[]]],[11,"rng","","",22,[[],["range",3]]],[11,"pre_alloc","","",22,[[]]],[11,"pre_dealloc","","",22,[[]]],[11,"allocated","","",22,[[]]],[11,"log64","","",22,[[]]],[11,"drop_on_failure","","",22,[[]]],[11,"perform","","",22,[[]]],[11,"discard","","",22,[[]]],[11,"open_no_root","","",22,[[],["result",6]]],[11,"open","","",22,[[],[["result",6],["rootcell",3]]]],[11,"is_open","","",22,[[]]],[11,"format","","",22,[[],["result",6]]],[11,"size","","",22,[[]]],[11,"available","","",22,[[]]],[11,"recover","","",22,[[]]],[11,"drop_journal","","",22,[[["journal",6]]]],[11,"journals","","",22,[[["fn",8]]]],[11,"journals_head","","",22,[[]]],[11,"close","","",22,[[],["result",6]]],[11,"name","corundum::default","",18,[[]]],[11,"format","","Formats the image file",18,[[],["result",6]]],[11,"gen","","",18,[[]]],[11,"size","","",18,[[]]],[11,"available","","",18,[[]]],[11,"used","","",18,[[]]],[11,"rng","","",18,[[],["range",3]]],[11,"start","","",18,[[]]],[11,"end","","",18,[[]]],[11,"pre_alloc","","",18,[[]]],[11,"pre_dealloc","","",18,[[]]],[11,"log64","","",18,[[]]],[11,"drop_on_failure","","",18,[[]]],[11,"zone","","",18,[[]]],[11,"prepare","","",18,[[]]],[11,"perform","","",18,[[]]],[11,"discard","","",18,[[]]],[11,"allocated","","",18,[[]]],[11,"journals_head","","",18,[[]]],[11,"drop_journal","","",18,[[["journal",6]]]],[11,"journals","","",18,[[["fn",8]]]],[11,"recover","","",18,[[]]],[11,"open","","",18,[[],[["result",6],["rootcell",3]]]],[11,"is_open","","",18,[[]]],[11,"open_no_root","","",18,[[],["result",6]]],[11,"close","","",18,[[],["result",6]]],[11,"print_info","","",18,[[]]],[11,"size_of","corundum::prc","",5,[[]]],[11,"size_of","","",5,[[]]],[11,"size_of","corundum::sync","",33,[[]]],[11,"size_of","","",33,[[]]],[11,"size_of","corundum::ptr","",36,[[]]],[11,"size_of","","",37,[[]]],[11,"init","corundum::boxed","",2,[[["journal",3]],["pbox",3]]],[11,"init","","",2,[[["journal",3]],["pbox",3]]],[11,"init","corundum::cell","",24,[[["journal",3]]]],[11,"init","corundum::prc","",5,[[["journal",3]],["prc",3]]],[11,"init","","",5,[[["journal",3]],["prc",3]]],[11,"init","","",6,[[["journal",3]],["weak",3]]],[11,"init","corundum::sync","",30,[[["journal",3]]]],[11,"init","","",33,[[["journal",3]],["parc",3]]],[11,"init","","",33,[[["journal",3]],["parc",3]]],[11,"pclone","corundum::boxed","Returns a new box with a <code>pclone()</code> of this box\'s contents.",2,[[["journal",3]],["pbox",3]]],[11,"pclone","corundum::cell","",23,[[["journal",3]],["pcell",3]]],[11,"pclone","","",24,[[["journal",3]],["prefcell",3]]],[11,"pclone","corundum::prc","Creates a new strong reference to the object",5,[[["journal",3]],["prc",3]]],[11,"pclone","","",6,[[["journal",3]],["weak",3]]],[11,"pclone","corundum::sync","",33,[[["journal",3]],["parc",3]]],[11,"pclone","","",34,[[["journal",3]],["weak",3]]],[11,"pclone","corundum::str","",12,[[["journal",3]]]],[11,"pclone_from","","",12,[[["journal",3]]]],[11,"pclone","corundum::vec","",15,[[["journal",3]]]],[11,"pfrom","corundum::cell","Crates a new <code>PRefCell</code> and drops the <code>Ref</code>",24,[[["journal",3],["ref",3]]]],[11,"pfrom","","Crates a new <code>PRefCell</code> and drops the <code>Ref</code>",24,[[["journal",3],["refmut",3]]]],[11,"pfrom","","Crates a new <code>PRefCell</code>",24,[[["journal",3]]]],[11,"pfrom","corundum::str","",12,[[["journal",3]],["string",3]]],[11,"pfrom","corundum::vec","",15,[[["journal",3]],["vec",3]]],[11,"pfrom","","",15,[[["journal",3]],["vec",3]]],[11,"pfrom","","",15,[[["box",3],["journal",3]],["vec",3]]],[11,"pfrom","","",15,[[["journal",3]],["vec",3]]],[11,"drop","corundum::boxed","",2,[[]]],[11,"drop","corundum::cell","",25,[[]]],[11,"drop","","",26,[[]]],[11,"drop","","",28,[[]]],[11,"drop","corundum::prc","Drops the <code>Prc</code> safely",5,[[]]],[11,"drop","","",6,[[]]],[11,"drop","","",7,[[]]],[11,"drop","corundum::sync","",31,[[]]],[11,"drop","","Drops the <code>Parc</code> safely",33,[[]]],[11,"drop","","",34,[[]]],[11,"drop","","",35,[[]]],[11,"drop","corundum::stm","",40,[[]]],[11,"drop","corundum::vec","",15,[[]]],[11,"drop","corundum::stat","",17,[[]]],[11,"drop","corundum::default","",18,[[]]],[11,"call_once","corundum","",19,[[]]],[11,"as_mut","corundum::str","",12,[[]]],[11,"as_ref","corundum::boxed","",2,[[]]],[11,"as_ref","corundum::prc","",5,[[]]],[11,"as_ref","corundum::sync","",33,[[]]],[11,"as_ref","corundum::str","",12,[[]]],[11,"as_ref","","",12,[[]]],[11,"as_ref","corundum::vec","",15,[[],["vec",3]]],[11,"as_ref","","",15,[[]]],[11,"from","corundum::cell","Crates a new <code>PRefCell</code>",24,[[]]],[11,"from","corundum::ptr","",36,[[]]],[11,"from","","",36,[[]]],[11,"from","corundum::vec","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …",15,[[["string",3]],["vec",3]]],[11,"into_iter","","",15,[[]]],[11,"next","","",42,[[],["option",4]]],[11,"next","","",43,[[],["option",4]]],[11,"clone","corundum::cell","",23,[[],["pcell",3]]],[11,"clone","","",24,[[],["prefcell",3]]],[11,"clone","","",27,[[]]],[11,"clone","corundum::prc","",7,[[]]],[11,"clone","corundum::sync","",35,[[]]],[11,"clone","corundum::ptr","",36,[[]]],[11,"clone","","",37,[[]]],[11,"clone","","",38,[[]]],[11,"clone","","",39,[[]]],[11,"clone","corundum::stm","",9,[[],["logenum",4]]],[11,"clone","","",10,[[]]],[11,"clone","","",41,[[]]],[11,"default","corundum::cell","",23,[[]]],[11,"default","","",28,[[]]],[11,"default","corundum::sync","",34,[[]]],[11,"default","corundum::ptr","",36,[[]]],[11,"default","corundum::stm","",41,[[]]],[11,"default","corundum::str","Creates an empty <code>String</code>.",12,[[],["string",3]]],[11,"default","corundum::vec","",15,[[]]],[11,"cmp","corundum::boxed","",2,[[["pbox",3]],["ordering",4]]],[11,"cmp","corundum::cell","",23,[[["pcell",3]],["ordering",4]]],[11,"cmp","","",24,[[["prefcell",3]],["ordering",4]]],[11,"cmp","","",27,[[],["ordering",4]]],[11,"cmp","","",28,[[["vcell",3]],["ordering",4]]],[11,"cmp","corundum::prc","",5,[[["prc",3]],["ordering",4]]],[11,"cmp","corundum::sync","",33,[[["parc",3]],["ordering",4]]],[11,"cmp","corundum::str","",12,[[["string",3]],["ordering",4]]],[11,"cmp","corundum::vec","",15,[[["vec",3]],["ordering",4]]],[11,"eq","corundum::boxed","",2,[[["pbox",3]]]],[11,"ne","","",2,[[["pbox",3]]]],[11,"eq","corundum::cell","",23,[[["pcell",3]]]],[11,"eq","","",24,[[["prefcell",3]]]],[11,"eq","","",27,[[]]],[11,"eq","","",28,[[["vcell",3]]]],[11,"eq","","",28,[[]]],[11,"eq","corundum::prc","",5,[[["prc",3]]]],[11,"eq","corundum::sync","",33,[[["parc",3]]]],[11,"eq","corundum::ptr","",36,[[]]],[11,"eq","","",37,[[]]],[11,"eq","corundum::str","",12,[[["string",3]]]],[11,"ne","","",12,[[["string",3]]]],[11,"eq","","",12,[[]]],[11,"ne","","",12,[[]]],[11,"eq","","",12,[[]]],[11,"ne","","",12,[[]]],[11,"eq","corundum::vec","",15,[[["vec",3]]]],[11,"ne","","",15,[[["vec",3]]]],[11,"eq","","",15,[[]]],[11,"ne","","",15,[[]]],[11,"eq","","",15,[[]]],[11,"ne","","",15,[[]]],[11,"eq","","",15,[[]]],[11,"ne","","",15,[[]]],[11,"eq","","",15,[[]]],[11,"ne","","",15,[[]]],[11,"partial_cmp","corundum::boxed","",2,[[["pbox",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["pbox",3]]]],[11,"le","","",2,[[["pbox",3]]]],[11,"ge","","",2,[[["pbox",3]]]],[11,"gt","","",2,[[["pbox",3]]]],[11,"partial_cmp","corundum::cell","",23,[[["pcell",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["pcell",3]]]],[11,"le","","",23,[[["pcell",3]]]],[11,"gt","","",23,[[["pcell",3]]]],[11,"ge","","",23,[[["pcell",3]]]],[11,"partial_cmp","","",24,[[["prefcell",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["prefcell",3]]]],[11,"le","","",24,[[["prefcell",3]]]],[11,"gt","","",24,[[["prefcell",3]]]],[11,"ge","","",24,[[["prefcell",3]]]],[11,"partial_cmp","","",27,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",28,[[["vcell",3]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["vcell",3]]]],[11,"le","","",28,[[["vcell",3]]]],[11,"gt","","",28,[[["vcell",3]]]],[11,"ge","","",28,[[["vcell",3]]]],[11,"partial_cmp","","",28,[[],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[]]],[11,"le","","",28,[[]]],[11,"gt","","",28,[[]]],[11,"ge","","",28,[[]]],[11,"partial_cmp","corundum::prc","",5,[[["prc",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["prc",3]]]],[11,"le","","",5,[[["prc",3]]]],[11,"gt","","",5,[[["prc",3]]]],[11,"ge","","",5,[[["prc",3]]]],[11,"partial_cmp","corundum::sync","",33,[[["parc",3]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["parc",3]]]],[11,"le","","",33,[[["parc",3]]]],[11,"gt","","",33,[[["parc",3]]]],[11,"ge","","",33,[[["parc",3]]]],[11,"partial_cmp","corundum::str","",12,[[["string",3]],[["ordering",4],["option",4]]]],[11,"lt","","",12,[[["string",3]]]],[11,"le","","",12,[[["string",3]]]],[11,"gt","","",12,[[["string",3]]]],[11,"ge","","",12,[[["string",3]]]],[11,"partial_cmp","corundum::vec","",15,[[["vec",3]],[["option",4],["ordering",4]]]],[11,"to_string","corundum::str","",12,[[],["stdstring",3]]],[11,"deref","corundum::boxed","",2,[[]]],[11,"deref","corundum::cell","",25,[[]]],[11,"deref","","",26,[[]]],[11,"deref","","",27,[[]]],[11,"deref","","",28,[[]]],[11,"deref","corundum::prc","",5,[[]]],[11,"deref","corundum::sync","",31,[[]]],[11,"deref","","",33,[[]]],[11,"deref","corundum::ptr","",37,[[]]],[11,"deref","","",38,[[]]],[11,"deref","","",39,[[]]],[11,"deref","corundum::str","",12,[[]]],[11,"deref","corundum::vec","",15,[[]]],[11,"deref","corundum","",19,[[]]],[11,"deref_mut","corundum::boxed","",2,[[]]],[11,"deref_mut","corundum::cell","",26,[[]]],[11,"deref_mut","","",28,[[]]],[11,"deref_mut","corundum::sync","",31,[[]]],[11,"deref_mut","corundum::ptr","",37,[[]]],[11,"deref_mut","","",39,[[]]],[11,"deref_mut","corundum::str","",12,[[]]],[11,"deref_mut","corundum","",19,[[]]],[11,"fmt","corundum::boxed","",2,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::cell","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::prc","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::sync","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::ptr","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::stm","",40,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::stm::journal","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","corundum::stm","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",41,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","corundum::str","",12,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::vec","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","corundum","",19,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::boxed","",2,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::cell","",24,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::prc","",5,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::sync","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::ptr","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::str","",12,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::vec","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"index","corundum::alloc","",21,[[]]],[11,"index","corundum::ptr","",36,[[]]],[11,"index","corundum::str","",12,[[["range",3]]]],[11,"index","","",12,[[["rangeto",3]]]],[11,"index","","",12,[[["rangefrom",3]]]],[11,"index","","",12,[[["rangefull",3]]]],[11,"index","","",12,[[["rangeinclusive",3]]]],[11,"index","","",12,[[["rangetoinclusive",3]]]],[11,"index","corundum::vec","",15,[[]]],[11,"index_mut","corundum::alloc","",21,[[]]],[11,"index_mut","corundum::str","",12,[[["range",3]]]],[11,"index_mut","","",12,[[["rangeto",3]]]],[11,"index_mut","","",12,[[["rangefrom",3]]]],[11,"index_mut","","",12,[[["rangefull",3]]]],[11,"index_mut","","",12,[[["rangeinclusive",3]]]],[11,"index_mut","","",12,[[["rangetoinclusive",3]]]],[11,"hash","corundum::boxed","",2,[[]]],[11,"hash","corundum::prc","",5,[[]]],[11,"hash","corundum::sync","",33,[[]]],[11,"hash","corundum::str","",12,[[]]],[11,"borrow","corundum::prc","",5,[[]]],[11,"borrow","corundum::sync","",33,[[]]],[11,"finish","corundum::boxed","",2,[[]]],[11,"write","","",2,[[]]],[11,"write_u8","","",2,[[]]],[11,"write_u16","","",2,[[]]],[11,"write_u32","","",2,[[]]],[11,"write_u64","","",2,[[]]],[11,"write_u128","","",2,[[]]],[11,"write_usize","","",2,[[]]],[11,"write_i8","","",2,[[]]],[11,"write_i16","","",2,[[]]],[11,"write_i32","","",2,[[]]],[11,"write_i64","","",2,[[]]],[11,"write_i128","","",2,[[]]],[11,"write_isize","","",2,[[]]],[11,"write_str","corundum::str","",12,[[],["result",6]]],[11,"write_char","","",12,[[],["result",6]]],[11,"fmt","corundum::prc","",5,[[["formatter",3]],["result",6]]],[11,"fmt","corundum::sync","",33,[[["formatter",3]],["result",6]]],[11,"poll","corundum","",19,[[["pin",3],["context",3]],["poll",4]]],[11,"init","corundum::alloc","Pool Initialization with a given device size",20,[[]]],[11,"log","","Adds a new low-level 64-bit log entry",20,[[]]],[11,"drop_on_failure","","Adds a new low-level <code>DropOnFailure</code> log entry",20,[[]]],[11,"aux_push","","Adds a new entry to the auxiliary list of changes",20,[[]]],[11,"drain_aux","","Drain the auxiliary list of changes",20,[[]]],[11,"prepare","","Begins a failure-atomic section",20,[[]]],[11,"perform","","Materializes the changes in the auxiliary list and clears …",20,[[]]],[11,"discard","","Discards the changes in the auxiliary buffer",20,[[]]],[11,"alloc_impl","","Generates required changes to the metadata for allocating …",20,[[]]],[11,"dealloc_impl","","Generates required changes to the metadata for reclaiming …",20,[[]]],[11,"is_allocated","","Determines if the given address range is allocated",20,[[]]],[11,"recover","","Starts the recovery procedure. If the crash happened …",20,[[]]],[11,"size","","Returns the pool size",20,[[]]],[11,"available","","Returns the total available space in the pool",20,[[]]],[11,"used","","Returns the total number of bytes used from the pool",20,[[]]],[11,"print","","Prints the free lists",20,[[]]],[11,"new","","Creates a new <code>Zones</code> object",21,[[]]],[11,"quota","","Returns the size of zones",21,[[]]],[11,"count","","Returns the number of zones",21,[[]]],[11,"at","","Returns a mutable reference to the i-th zone object",21,[[]]],[11,"get","","Returns a mutable reference to the zone object associated …",21,[[]]],[11,"from_off","","Returns a mutable reference to the zone object associated …",21,[[]]],[11,"name","","Returns the name of the pool type",0,[[]]],[11,"open_no_root","","Opens a new pool without any root object. This function …",0,[[],["result",6]]],[11,"close","","Commits all changes and clears the logs for all threads",0,[[],["result",6]]],[11,"zone","","Returns the zone index corresponding to a given address",0,[[]]],[11,"open","","Opens a pool and retrieves the root object",0,[[],[["result",6],["rootcell",3]]]],[11,"is_open","","Returns true if the pool is open",0,[[]]],[11,"format","","Formats the memory pool file",0,[[],["result",6]]],[11,"apply_flags","","Applies open pool flags",0,[[],["result",6]]],[11,"allocated","","Indicates if the given offset is allocated",0,[[]]],[11,"off_unchecked","","Translates raw pointers to memory offsets",0,[[]]],[11,"get_unchecked","","Acquires a reference pointer to the object",0,[[]]],[11,"get_mut_unchecked","","Acquires a mutable reference to the object",0,[[]]],[11,"deref_slice_unchecked","","Acquires a reference to the slice",0,[[]]],[11,"deref_slice_unchecked_mut","","Acquires a mutable reference to the slice",0,[[]]],[11,"deref","","Acquires a reference to the object",0,[[],["result",6]]],[11,"deref_mut","","Acquires a mutable reference pointer to the object",0,[[],["result",6]]],[11,"off","","Translates raw pointers to memory offsets",0,[[],["result",6]]],[11,"rng","","Valid Virtual Address Range",0,[[],["range",3]]],[11,"start","","Start of virtual address range",0,[[]]],[11,"end","","End of virtual address range",0,[[]]],[11,"size","","Total size of the memory pool",0,[[]]],[11,"available","","Available space in the pool",0,[[]]],[11,"used","","Total occupied space",0,[[]]],[11,"valid","","Checks if the reference <code>p</code> belongs to this pool",0,[[]]],[11,"contains","","Checks if <code>addr</code> is in the valid address range if this …",0,[[]]],[11,"alloc","","Allocate memory as described by the given <code>size</code>.",0,[[]]],[11,"dealloc","","Deallocate the block of memory at the given <code>ptr</code> pointer …",0,[[]]],[11,"log64","","Adds a low-level log to update as 64-bit <code>obj</code> to <code>val</code> when  …",0,[[]]],[11,"drop_on_failure","","Adds a low-level <code>DropOnFailure</code> log to perform inside the …",0,[[]]],[11,"prepare","","In case of not using <code>pre_alloc</code> or <code>pre_dealloc</code>, starts a …",0,[[]]],[11,"perform","","Performs the prepared operations",0,[[]]],[11,"discard","","Discards the prepared operations",0,[[]]],[11,"alloc_zeroed","","Behaves like <code>alloc</code>, but also ensures that the contents …",0,[[]]],[11,"new","","Allocates new memory and then places <code>x</code> into it with …",0,[[["journal",3],["psafe",8]]]],[11,"new_slice","","Allocates a new slice and then places <code>x</code> into it with …",0,[[["journal",3]]]],[11,"atomic_new","","Allocates new memory and then places <code>x</code> into it without …",0,[[]]],[11,"atomic_new_slice","","Allocates new memory and then places <code>x</code> into it without …",0,[[]]],[11,"new_uninit","","Allocates new memory without copying data",0,[[["journal",3]]]],[11,"new_uninit_for_layout","","Allocates new memory without copying data",0,[[["journal",3]]]],[11,"atomic_new_uninit","","Allocates new memory without copying data and realizing …",0,[[]]],[11,"alloc_for_value","","Allocates new memory for value <code>x</code>",0,[[]]],[11,"free","","Creates a <code>DropOnCommit</code> log for the value <code>x</code>",0,[[]]],[11,"free_slice","","Creates a <code>DropOnCommit</code> log for the value <code>x</code>",0,[[]]],[11,"free_nolog","","Frees the allocation for value <code>x</code> immediately",0,[[]]],[11,"drop_journal","","Drops a <code>journal</code> from memory",0,[[["journal",3]]]],[11,"journals_head","","Returns a reference to the offset of the first journal",0,[[]]],[11,"journals","","Runs a closure with a mutable reference to a …",0,[[["fn",8]]]],[11,"recover","","Recovers from a crash",0,[[]]],[11,"commit","","Commits all changes and clears the logs for one thread",0,[[]]],[11,"commit_no_clear","","Commits all changes without clearing the logs",0,[[]]],[11,"clear","","Clears the logs",0,[[]]],[11,"rollback","","Discards all changes and clears the logs",0,[[]]],[11,"rollback_no_clear","","Discards all changes without clearing the logs",0,[[]]],[11,"transaction","","Executes commands atomically with respect to system …",0,[[["fnonce",8]],["result",6]]],[11,"gen","","",0,[[]]],[11,"print_info","","Prints memory information",0,[[]]],[11,"new","corundum::cell","Creates a new <code>PCell</code> containing the given value.",23,[[],["pcell",3]]],[11,"set","","Sets the contained value.",23,[[["journal",3]]]],[11,"swap","","Swaps the values of two Cells.",23,[[["journal",3]]]],[11,"replace","","Replaces the contained value, and returns it.",23,[[["journal",3]]]],[11,"into_inner","","Unwraps the value.",23,[[]]],[11,"add","","Increments the contained value by <code>val</code>.",23,[[["journal",3]]]],[11,"sub","","Subtracts the contained value by <code>val</code>.",23,[[["journal",3]]]],[11,"mul","","Multiplies the contained value with <code>val</code>.",23,[[["journal",3]]]],[11,"div","","Divides the contained value with <code>val</code>.",23,[[["journal",3]]]],[11,"rem","","Divides the contained value with <code>val</code> and keeps the …",23,[[["journal",3]]]],[11,"get","","Returns a copy of the contained value.",23,[[]]],[11,"get_ref","","",23,[[]]],[11,"update","","Updates the contained value using a function and returns …",23,[[["journal",3]]]],[11,"update_inplace","","Updates the contained value using an updater function …",23,[[]]],[11,"update_inplace_mut","","Updates the contained value using an updater function …",23,[[["journal",3]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",23,[[["journal",3]]]],[11,"as_mut","","Returns a mutable reference to the underlying data …",23,[[]]],[11,"take","","Takes the value of the cell, leaving <code>Default::default()</code> …",23,[[["journal",3]]]],[11,"new","","Creates a new instance of <code>PRefCell</code> with the given value",24,[[]]],[11,"replace","","Replaces the wrapped value with a new one, returning the …",24,[[["journal",3]]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from <code>f</code>…",24,[[["journal",3],["fnonce",8]]]],[11,"swap","","Swaps the wrapped value of <code>self</code> with the wrapped value of …",24,[[["journal",3]]]],[11,"get_mut","","Takes a log and returns a mutable reference to the …",24,[[["journal",3]]]],[11,"as_mut","","Returns a mutable reference to the underlying data …",24,[[]]],[11,"borrow","","Immutably borrows from an owned value.",24,[[],["ref",3]]],[11,"read","","Returns a clone of the underlying data",24,[[]]],[11,"take","","Takes the value of the cell, leaving <code>Default::default()</code> …",24,[[["journal",3]]]],[11,"borrow_mut","","Mutably borrows from an owned value.",24,[[["journal",3]],["refmut",3]]],[11,"as_non_null_mut","","Returns a <code>LogNonNull</code> pointer to the data",24,[[["journal",3]],["lognonnull",3]]],[11,"as_non_null","","Returns a <code>NonNull</code> pointer to the data",24,[[],["nonnull",3]]],[11,"clone","","Copies a <code>Ref</code>.",25,[[["ref",3]],["ref",3]]],[11,"leak","","Convert into a reference to the underlying data.",25,[[["ref",3]]]],[11,"into_mut","","Converts <code>RefMut</code> into a mutable reference within the same …",26,[[["refmut",3]]]],[11,"new","","",27,[[["arc",3]]]],[11,"strong_count","","",27,[[]]],[11,"new","","",28,[[]]],[11,"new","corundum::sync","Creates a new <code>Mutex</code>",30,[[],["pmutex",3]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is …",30,[[["journal",3]],["mutexguard",3]]],[11,"try_lock","","Attempts to acquire this lock.",30,[[["journal",3]],[["trylockresult",6],["mutexguard",3]]]],[11,"new","","Constructs a new <code>Parc<T></code>.",33,[[["journal",3]],["parc",3]]],[11,"new_uninit","","Constructs a new <code>Parc</code> with uninitialized contents.",33,[[["journal",3]],[["maybeuninit",19],["parc",3]]]],[11,"new_zeroed","","Constructs a new <code>Parc</code> with uninitialized contents, with …",33,[[["journal",3]],[["maybeuninit",19],["parc",3]]]],[11,"assume_init","","Converts to <code>Parc<T></code>.",33,[[],["parc",3]]],[11,"get_mut","","Returns a mutable reference into the given <code>Parc</code>, if there …",33,[[],[["option",4],["maybeuninit",19]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given <code>Parc</code>, without …",33,[[],["maybeuninit",19]]],[11,"downgrade","","Creates a new [<code>Weak</code>] pointer to this allocation.",33,[[["journal",3]],["weak",3]]],[11,"demote","","Creates a new sharable <code>VWeak</code> pointer to this allocation.",33,[[],["vweak",3]]],[11,"unsafe_demote","","Demote without dynamically checking transaction boundaries",33,[[],["vweak",3]]],[11,"weak_count","","Gets the number of <code>Weak</code> pointers to this allocation.",33,[[]]],[11,"strong_count","","Gets the number of <code>Strong</code> pointers to this allocation.",33,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Parc</code>s point to the same allocation…",33,[[]]],[11,"initialize","","Initializes boxed data with <code>value</code> in-place if it is <code>None</code>",33,[[["option",4]],["result",6]]],[11,"as_raw","","",34,[[]]],[11,"into_raw","","",34,[[]]],[11,"from_raw","","",34,[[]]],[11,"new","","Creates a new dangling weak pointer",34,[[],["weak",3]]],[11,"upgrade","","Attempts to upgrade the <code>Weak</code> pointer to an [<code>Parc</code>], …",34,[[["journal",3]],[["parc",3],["option",4]]]],[11,"strong_count","","Gets the number of strong (<code>Parc</code>) pointers pointing to …",34,[[]]],[11,"weak_count","","Gets an approximation of the number of <code>Weak</code> pointers …",34,[[]]],[11,"ptr_eq","","Returns <code>true</code> if the two <code>Weak</code>s point to the same …",34,[[]]],[11,"promote","","Attempts to promote the <code>VWeak</code> pointer to an [<code>Parc</code>], …",35,[[["journal",3]],[["parc",3],["option",4]]]],[11,"new","corundum::ptr","Creates a new fat pointer given a slice",36,[[]]],[11,"empty","","Sets the capacity to zero",36,[[]]],[11,"is_empty","","Returns true if the capacity is zero",36,[[]]],[11,"get","","Returns a reference to the object at index <code>i</code>",36,[[]]],[11,"get_mut","","Returns a mutable reference to the object at index <code>i</code>",36,[[]]],[11,"get_unchecked","","Returns a mutable reference to the object at index <code>i</code> …",36,[[]]],[11,"off","","Returns the offset",36,[[]]],[11,"capacity","","Returns the capacity of the fat pointer",36,[[]]],[11,"as_slice","","Converts the fat pointer into a slice of type <code>&[T]</code>",36,[[]]],[11,"split_at","","Divides one slice into two at an index.",36,[[]]],[11,"split_at_mut","","Divides one mutable slice into two at an index.",36,[[]]],[11,"dup","","Creates a new copy of data and returns a <code>FatPtr</code> pointer",36,[[],["fatptr",3]]],[11,"is_dangling","","Checks if this pointer is dangling",37,[[]]],[11,"off","","Returns the file offset",37,[[]]],[11,"off_ref","","Returns a reference to the file offset",37,[[]]],[11,"new_unchecked","","Creates a new <code>NonNull</code>.",38,[[]]],[11,"new","","Creates a <code>Some(NonNull)</code> if <code>ptr</code> is not null; otherwise <code>None</code>…",38,[[],["option",4]]],[11,"as_ref","","",38,[[]]],[11,"new_unchecked","","Creates a new <code>LogNonNull</code>.",39,[[["journal",3]]]],[11,"new","","Creates a <code>Some(LogNonNull)</code> if <code>ptr</code> is not null; otherwise …",39,[[["journal",3]],["option",4]]],[11,"load","corundum::stm","Loads a chaperon file",40,[[],["result",6]]],[11,"filename","","Returns the chaperon filename",40,[[]]],[11,"session","","Starts a chaperoned session",40,[[["fnonce",8]],["result",6]]],[11,"update","","Update the owner\'s flag",10,[[]]],[11,"off","","Returns the offset of the log flag in the pool.",10,[[]]],[11,"set","","Sets the <code>off</code> and <code>len</code> of the log",41,[[]]],[11,"new","","Create a new log entry",41,[[["logenum",4],["notifier",4]]]],[11,"take","","Takes a log of <code>x</code> into <code>journal</code> and notifies the owner that …",41,[[["journal",3],["notifier",4]],[["log",3],["ptr",3]]]],[11,"drop_on_commit","","Creates a new <code>DropOnCommit</code> log and writes it on <code>journal</code>",41,[[["journal",3]],[["log",3],["ptr",3]]]],[11,"drop_on_abort","","Creates a new <code>DropOnAbort</code> log and writes it on <code>journal</code>",41,[[["journal",3]],[["log",3],["ptr",3]]]],[11,"drop_on_failure","","Creates a new <code>DropOnFailure</code> log and writes it on <code>journal</code>",41,[[["journal",3]],[["log",3],["ptr",3]]]],[11,"unlock_on_commit","","Creates a new <code>UnlockOnCommit</code> for locking data in a thread",41,[[["journal",3]]]],[11,"recount_on_failure","","Creates a new <code>DropOnCommit</code> log and writes it on <code>journal</code>",41,[[["journal",3]],[["log",3],["ptr",3]]]],[11,"clear","","Clears this log and notifies the owner",41,[[]]],[11,"notify","","Notify the owner that the log is taken/cleared according …",41,[[]]]],"p":[[8,"MemPool"],[8,"PmemUsage"],[3,"Pbox"],[8,"RootObj"],[8,"PClone"],[3,"Prc"],[3,"Weak"],[3,"VWeak"],[3,"Journal"],[4,"LogEnum"],[4,"Notifier"],[8,"Logger"],[3,"String"],[8,"ToStringSlice"],[8,"ToPString"],[3,"Vec"],[8,"PFrom"],[4,"Measure"],[3,"BuddyAlloc"],[3,"AssertTxInSafe"],[3,"BuddyAlg"],[3,"Zones"],[3,"Heap"],[3,"PCell"],[3,"PRefCell"],[3,"Ref"],[3,"RefMut"],[3,"RootCell"],[3,"VCell"],[3,"PrcBox"],[3,"PMutex"],[3,"MutexGuard"],[3,"ParcInner"],[3,"Parc"],[3,"Weak"],[3,"VWeak"],[3,"FatPtr"],[3,"Ptr"],[3,"NonNull"],[3,"LogNonNull"],[3,"Chaperon"],[3,"Log"],[3,"IntoIteratorHelper"],[3,"IterHelper"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);