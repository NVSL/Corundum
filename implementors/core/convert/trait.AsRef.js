(function() {var implementors = {};
implementors["corundum"] = [{"text":"impl&lt;T:&nbsp;PSafe + ?Sized, A:&nbsp;MemPool&gt; AsRef&lt;T&gt; for Pbox&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + ?Sized, A:&nbsp;MemPool&gt; AsRef&lt;T&gt; for Prc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + ?Sized, A:&nbsp;MemPool&gt; AsRef&lt;T&gt; for Parc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool&gt; AsRef&lt;str&gt; for String&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool&gt; AsRef&lt;[u8]&gt; for String&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe, A:&nbsp;MemPool&gt; AsRef&lt;Vec&lt;T, A&gt;&gt; for Vec&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe, A:&nbsp;MemPool&gt; AsRef&lt;[T]&gt; for Vec&lt;T, A&gt;","synthetic":false,"types":[]}];
implementors["memmap"] = [{"text":"impl AsRef&lt;[u8]&gt; for Mmap","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for MmapMut","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl AsRef&lt;[u8]&gt; for Literal","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()