(function() {var implementors = {};
implementors["corundum"] = [{"text":"impl&lt;T:&nbsp;PSafe + Logger&lt;A&gt; + Clone, A:&nbsp;MemPool&gt; Clone for PCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + Clone, A:&nbsp;MemPool&gt; Clone for PRefCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe, A:&nbsp;MemPool, '_&gt; Clone for RootCell&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + ?Sized, A:&nbsp;MemPool&gt; Clone for VWeak&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + ?Sized, A:&nbsp;MemPool&gt; Clone for VWeak&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool, T:&nbsp;PSafe&gt; Clone for FatPtr&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool, T:&nbsp;PSafe + ?Sized&gt; Clone for Ptr&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + ?Sized&gt; Clone for NonNull&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + ?Sized, A:&nbsp;MemPool&gt; Clone for LogNonNull&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LogEnum","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool&gt; Clone for Notifier&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool&gt; Clone for Log&lt;A&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()