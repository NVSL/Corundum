(function() {var implementors = {};
implementors["corundum"] = [{"text":"impl&lt;T:&nbsp;PSafe + Ord + ?Sized, A:&nbsp;MemPool&gt; Ord for Pbox&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + Ord + Copy, A:&nbsp;MemPool&gt; Ord for LogCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;PSafe + Ord + ?Sized, A:&nbsp;MemPool&gt; Ord for LogRefCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord + PSafe, A:&nbsp;MemPool, '_&gt; Ord for RootCell&lt;'_, T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + VSafe + Ord + Copy, A:&nbsp;MemPool&gt; Ord for VCell&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord + PSafe + ?Sized, A:&nbsp;MemPool&gt; Ord for Prc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord + PSafe + ?Sized, A:&nbsp;MemPool&gt; Ord for Parc&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Ord + MemPool&gt; Ord for String&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;MemPool, T:&nbsp;PSafe + Ord&gt; Ord for Vec&lt;T, A&gt;","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Ord for Sign","synthetic":false,"types":[]},{"text":"impl Ord for BigInt","synthetic":false,"types":[]},{"text":"impl Ord for BigUint","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Ord for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()